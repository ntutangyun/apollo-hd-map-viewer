// source: modules/map/proto/map_lane.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.apollo.hdmap.Lane');
goog.provide('proto.apollo.hdmap.Lane.LaneDirection');
goog.provide('proto.apollo.hdmap.Lane.LaneTurn');
goog.provide('proto.apollo.hdmap.Lane.LaneType');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.apollo.hdmap.Curve');
goog.require('proto.apollo.hdmap.Id');
goog.require('proto.apollo.hdmap.LaneBoundary');
goog.require('proto.apollo.hdmap.LaneSampleAssociation');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.Lane = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.hdmap.Lane.repeatedFields_, null);
};
goog.inherits(proto.apollo.hdmap.Lane, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.Lane.displayName = 'proto.apollo.hdmap.Lane';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.hdmap.Lane.repeatedFields_ = [7,8,9,10,11,14,15,17,18,20,21,22];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.Lane.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.Lane.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.Lane} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.Lane.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.apollo.hdmap.Id.toObject(includeInstance, f),
    centralCurve: (f = msg.getCentralCurve()) && proto.apollo.hdmap.Curve.toObject(includeInstance, f),
    leftBoundary: (f = msg.getLeftBoundary()) && proto.apollo.hdmap.LaneBoundary.toObject(includeInstance, f),
    rightBoundary: (f = msg.getRightBoundary()) && proto.apollo.hdmap.LaneBoundary.toObject(includeInstance, f),
    length: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    speedLimit: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    overlapIdList: jspb.Message.toObjectList(msg.getOverlapIdList(),
    proto.apollo.hdmap.Id.toObject, includeInstance),
    predecessorIdList: jspb.Message.toObjectList(msg.getPredecessorIdList(),
    proto.apollo.hdmap.Id.toObject, includeInstance),
    successorIdList: jspb.Message.toObjectList(msg.getSuccessorIdList(),
    proto.apollo.hdmap.Id.toObject, includeInstance),
    leftNeighborForwardLaneIdList: jspb.Message.toObjectList(msg.getLeftNeighborForwardLaneIdList(),
    proto.apollo.hdmap.Id.toObject, includeInstance),
    rightNeighborForwardLaneIdList: jspb.Message.toObjectList(msg.getRightNeighborForwardLaneIdList(),
    proto.apollo.hdmap.Id.toObject, includeInstance),
    type: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    turn: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    leftNeighborReverseLaneIdList: jspb.Message.toObjectList(msg.getLeftNeighborReverseLaneIdList(),
    proto.apollo.hdmap.Id.toObject, includeInstance),
    rightNeighborReverseLaneIdList: jspb.Message.toObjectList(msg.getRightNeighborReverseLaneIdList(),
    proto.apollo.hdmap.Id.toObject, includeInstance),
    junctionId: (f = msg.getJunctionId()) && proto.apollo.hdmap.Id.toObject(includeInstance, f),
    leftSampleList: jspb.Message.toObjectList(msg.getLeftSampleList(),
    proto.apollo.hdmap.LaneSampleAssociation.toObject, includeInstance),
    rightSampleList: jspb.Message.toObjectList(msg.getRightSampleList(),
    proto.apollo.hdmap.LaneSampleAssociation.toObject, includeInstance),
    direction: (f = jspb.Message.getField(msg, 19)) == null ? undefined : f,
    leftRoadSampleList: jspb.Message.toObjectList(msg.getLeftRoadSampleList(),
    proto.apollo.hdmap.LaneSampleAssociation.toObject, includeInstance),
    rightRoadSampleList: jspb.Message.toObjectList(msg.getRightRoadSampleList(),
    proto.apollo.hdmap.LaneSampleAssociation.toObject, includeInstance),
    selfReverseLaneIdList: jspb.Message.toObjectList(msg.getSelfReverseLaneIdList(),
    proto.apollo.hdmap.Id.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Lane as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.Lane.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.centralCurve;

  /** @type {?|undefined} */
  this.leftBoundary;

  /** @type {?|undefined} */
  this.rightBoundary;

  /** @type {?|undefined} */
  this.length;

  /** @type {?|undefined} */
  this.speedLimit;

  /** @type {?|undefined} */
  this.overlapIdList;

  /** @type {?|undefined} */
  this.predecessorIdList;

  /** @type {?|undefined} */
  this.successorIdList;

  /** @type {?|undefined} */
  this.leftNeighborForwardLaneIdList;

  /** @type {?|undefined} */
  this.rightNeighborForwardLaneIdList;

  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.turn;

  /** @type {?|undefined} */
  this.leftNeighborReverseLaneIdList;

  /** @type {?|undefined} */
  this.rightNeighborReverseLaneIdList;

  /** @type {?|undefined} */
  this.junctionId;

  /** @type {?|undefined} */
  this.leftSampleList;

  /** @type {?|undefined} */
  this.rightSampleList;

  /** @type {?|undefined} */
  this.direction;

  /** @type {?|undefined} */
  this.leftRoadSampleList;

  /** @type {?|undefined} */
  this.rightRoadSampleList;

  /** @type {?|undefined} */
  this.selfReverseLaneIdList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.Lane.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.Lane}
 */
proto.apollo.hdmap.Lane.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.Lane();
  obj.id && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.hdmap.Id.fromObject(obj.id));
  obj.centralCurve && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.hdmap.Curve.fromObject(obj.centralCurve));
  obj.leftBoundary && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.hdmap.LaneBoundary.fromObject(obj.leftBoundary));
  obj.rightBoundary && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.hdmap.LaneBoundary.fromObject(obj.rightBoundary));
  obj.length != null && jspb.Message.setField(msg, 5, obj.length);
  obj.speedLimit != null && jspb.Message.setField(msg, 6, obj.speedLimit);
  obj.overlapIdList && jspb.Message.setRepeatedWrapperField(
      msg, 7, obj.overlapIdList.map(
          proto.apollo.hdmap.Id.fromObject));
  obj.predecessorIdList && jspb.Message.setRepeatedWrapperField(
      msg, 8, obj.predecessorIdList.map(
          proto.apollo.hdmap.Id.fromObject));
  obj.successorIdList && jspb.Message.setRepeatedWrapperField(
      msg, 9, obj.successorIdList.map(
          proto.apollo.hdmap.Id.fromObject));
  obj.leftNeighborForwardLaneIdList && jspb.Message.setRepeatedWrapperField(
      msg, 10, obj.leftNeighborForwardLaneIdList.map(
          proto.apollo.hdmap.Id.fromObject));
  obj.rightNeighborForwardLaneIdList && jspb.Message.setRepeatedWrapperField(
      msg, 11, obj.rightNeighborForwardLaneIdList.map(
          proto.apollo.hdmap.Id.fromObject));
  obj.type != null && jspb.Message.setField(msg, 12, obj.type);
  obj.turn != null && jspb.Message.setField(msg, 13, obj.turn);
  obj.leftNeighborReverseLaneIdList && jspb.Message.setRepeatedWrapperField(
      msg, 14, obj.leftNeighborReverseLaneIdList.map(
          proto.apollo.hdmap.Id.fromObject));
  obj.rightNeighborReverseLaneIdList && jspb.Message.setRepeatedWrapperField(
      msg, 15, obj.rightNeighborReverseLaneIdList.map(
          proto.apollo.hdmap.Id.fromObject));
  obj.junctionId && jspb.Message.setWrapperField(
      msg, 16, proto.apollo.hdmap.Id.fromObject(obj.junctionId));
  obj.leftSampleList && jspb.Message.setRepeatedWrapperField(
      msg, 17, obj.leftSampleList.map(
          proto.apollo.hdmap.LaneSampleAssociation.fromObject));
  obj.rightSampleList && jspb.Message.setRepeatedWrapperField(
      msg, 18, obj.rightSampleList.map(
          proto.apollo.hdmap.LaneSampleAssociation.fromObject));
  obj.direction != null && jspb.Message.setField(msg, 19, obj.direction);
  obj.leftRoadSampleList && jspb.Message.setRepeatedWrapperField(
      msg, 20, obj.leftRoadSampleList.map(
          proto.apollo.hdmap.LaneSampleAssociation.fromObject));
  obj.rightRoadSampleList && jspb.Message.setRepeatedWrapperField(
      msg, 21, obj.rightRoadSampleList.map(
          proto.apollo.hdmap.LaneSampleAssociation.fromObject));
  obj.selfReverseLaneIdList && jspb.Message.setRepeatedWrapperField(
      msg, 22, obj.selfReverseLaneIdList.map(
          proto.apollo.hdmap.Id.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.Lane}
 */
proto.apollo.hdmap.Lane.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.Lane;
  return proto.apollo.hdmap.Lane.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.Lane} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.Lane}
 */
proto.apollo.hdmap.Lane.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.hdmap.Id;
      reader.readMessage(value,proto.apollo.hdmap.Id.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.apollo.hdmap.Curve;
      reader.readMessage(value,proto.apollo.hdmap.Curve.deserializeBinaryFromReader);
      msg.setCentralCurve(value);
      break;
    case 3:
      var value = new proto.apollo.hdmap.LaneBoundary;
      reader.readMessage(value,proto.apollo.hdmap.LaneBoundary.deserializeBinaryFromReader);
      msg.setLeftBoundary(value);
      break;
    case 4:
      var value = new proto.apollo.hdmap.LaneBoundary;
      reader.readMessage(value,proto.apollo.hdmap.LaneBoundary.deserializeBinaryFromReader);
      msg.setRightBoundary(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLength(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedLimit(value);
      break;
    case 7:
      var value = new proto.apollo.hdmap.Id;
      reader.readMessage(value,proto.apollo.hdmap.Id.deserializeBinaryFromReader);
      msg.addOverlapId(value);
      break;
    case 8:
      var value = new proto.apollo.hdmap.Id;
      reader.readMessage(value,proto.apollo.hdmap.Id.deserializeBinaryFromReader);
      msg.addPredecessorId(value);
      break;
    case 9:
      var value = new proto.apollo.hdmap.Id;
      reader.readMessage(value,proto.apollo.hdmap.Id.deserializeBinaryFromReader);
      msg.addSuccessorId(value);
      break;
    case 10:
      var value = new proto.apollo.hdmap.Id;
      reader.readMessage(value,proto.apollo.hdmap.Id.deserializeBinaryFromReader);
      msg.addLeftNeighborForwardLaneId(value);
      break;
    case 11:
      var value = new proto.apollo.hdmap.Id;
      reader.readMessage(value,proto.apollo.hdmap.Id.deserializeBinaryFromReader);
      msg.addRightNeighborForwardLaneId(value);
      break;
    case 12:
      var value = /** @type {!proto.apollo.hdmap.Lane.LaneType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 13:
      var value = /** @type {!proto.apollo.hdmap.Lane.LaneTurn} */ (reader.readEnum());
      msg.setTurn(value);
      break;
    case 14:
      var value = new proto.apollo.hdmap.Id;
      reader.readMessage(value,proto.apollo.hdmap.Id.deserializeBinaryFromReader);
      msg.addLeftNeighborReverseLaneId(value);
      break;
    case 15:
      var value = new proto.apollo.hdmap.Id;
      reader.readMessage(value,proto.apollo.hdmap.Id.deserializeBinaryFromReader);
      msg.addRightNeighborReverseLaneId(value);
      break;
    case 16:
      var value = new proto.apollo.hdmap.Id;
      reader.readMessage(value,proto.apollo.hdmap.Id.deserializeBinaryFromReader);
      msg.setJunctionId(value);
      break;
    case 17:
      var value = new proto.apollo.hdmap.LaneSampleAssociation;
      reader.readMessage(value,proto.apollo.hdmap.LaneSampleAssociation.deserializeBinaryFromReader);
      msg.addLeftSample(value);
      break;
    case 18:
      var value = new proto.apollo.hdmap.LaneSampleAssociation;
      reader.readMessage(value,proto.apollo.hdmap.LaneSampleAssociation.deserializeBinaryFromReader);
      msg.addRightSample(value);
      break;
    case 19:
      var value = /** @type {!proto.apollo.hdmap.Lane.LaneDirection} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    case 20:
      var value = new proto.apollo.hdmap.LaneSampleAssociation;
      reader.readMessage(value,proto.apollo.hdmap.LaneSampleAssociation.deserializeBinaryFromReader);
      msg.addLeftRoadSample(value);
      break;
    case 21:
      var value = new proto.apollo.hdmap.LaneSampleAssociation;
      reader.readMessage(value,proto.apollo.hdmap.LaneSampleAssociation.deserializeBinaryFromReader);
      msg.addRightRoadSample(value);
      break;
    case 22:
      var value = new proto.apollo.hdmap.Id;
      reader.readMessage(value,proto.apollo.hdmap.Id.deserializeBinaryFromReader);
      msg.addSelfReverseLaneId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.Lane.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.Lane.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.Lane} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.Lane.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.hdmap.Id.serializeBinaryToWriter
    );
  }
  f = message.getCentralCurve();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.hdmap.Curve.serializeBinaryToWriter
    );
  }
  f = message.getLeftBoundary();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.hdmap.LaneBoundary.serializeBinaryToWriter
    );
  }
  f = message.getRightBoundary();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.hdmap.LaneBoundary.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getOverlapIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.apollo.hdmap.Id.serializeBinaryToWriter
    );
  }
  f = message.getPredecessorIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.apollo.hdmap.Id.serializeBinaryToWriter
    );
  }
  f = message.getSuccessorIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.apollo.hdmap.Id.serializeBinaryToWriter
    );
  }
  f = message.getLeftNeighborForwardLaneIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.apollo.hdmap.Id.serializeBinaryToWriter
    );
  }
  f = message.getRightNeighborForwardLaneIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.apollo.hdmap.Id.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.hdmap.Lane.LaneType} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = /** @type {!proto.apollo.hdmap.Lane.LaneTurn} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getLeftNeighborReverseLaneIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.apollo.hdmap.Id.serializeBinaryToWriter
    );
  }
  f = message.getRightNeighborReverseLaneIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.apollo.hdmap.Id.serializeBinaryToWriter
    );
  }
  f = message.getJunctionId();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.apollo.hdmap.Id.serializeBinaryToWriter
    );
  }
  f = message.getLeftSampleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.apollo.hdmap.LaneSampleAssociation.serializeBinaryToWriter
    );
  }
  f = message.getRightSampleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      proto.apollo.hdmap.LaneSampleAssociation.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.hdmap.Lane.LaneDirection} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeEnum(
      19,
      f
    );
  }
  f = message.getLeftRoadSampleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.apollo.hdmap.LaneSampleAssociation.serializeBinaryToWriter
    );
  }
  f = message.getRightRoadSampleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      21,
      f,
      proto.apollo.hdmap.LaneSampleAssociation.serializeBinaryToWriter
    );
  }
  f = message.getSelfReverseLaneIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      22,
      f,
      proto.apollo.hdmap.Id.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.hdmap.Lane.LaneType = {
  NONE: 1,
  CITY_DRIVING: 2,
  BIKING: 3,
  SIDEWALK: 4,
  PARKING: 5,
  SHOULDER: 6
};

/**
 * @enum {number}
 */
proto.apollo.hdmap.Lane.LaneTurn = {
  NO_TURN: 1,
  LEFT_TURN: 2,
  RIGHT_TURN: 3,
  U_TURN: 4
};

/**
 * @enum {number}
 */
proto.apollo.hdmap.Lane.LaneDirection = {
  FORWARD: 1,
  BACKWARD: 2,
  BIDIRECTION: 3
};

/**
 * optional Id id = 1;
 * @return {?proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.Lane.prototype.getId = function() {
  return /** @type{?proto.apollo.hdmap.Id} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.Id, 1));
};


/**
 * @param {?proto.apollo.hdmap.Id|undefined} value
 * @return {!proto.apollo.hdmap.Lane} returns this
*/
proto.apollo.hdmap.Lane.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Lane.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Curve central_curve = 2;
 * @return {?proto.apollo.hdmap.Curve}
 */
proto.apollo.hdmap.Lane.prototype.getCentralCurve = function() {
  return /** @type{?proto.apollo.hdmap.Curve} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.Curve, 2));
};


/**
 * @param {?proto.apollo.hdmap.Curve|undefined} value
 * @return {!proto.apollo.hdmap.Lane} returns this
*/
proto.apollo.hdmap.Lane.prototype.setCentralCurve = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearCentralCurve = function() {
  return this.setCentralCurve(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Lane.prototype.hasCentralCurve = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LaneBoundary left_boundary = 3;
 * @return {?proto.apollo.hdmap.LaneBoundary}
 */
proto.apollo.hdmap.Lane.prototype.getLeftBoundary = function() {
  return /** @type{?proto.apollo.hdmap.LaneBoundary} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.LaneBoundary, 3));
};


/**
 * @param {?proto.apollo.hdmap.LaneBoundary|undefined} value
 * @return {!proto.apollo.hdmap.Lane} returns this
*/
proto.apollo.hdmap.Lane.prototype.setLeftBoundary = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearLeftBoundary = function() {
  return this.setLeftBoundary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Lane.prototype.hasLeftBoundary = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LaneBoundary right_boundary = 4;
 * @return {?proto.apollo.hdmap.LaneBoundary}
 */
proto.apollo.hdmap.Lane.prototype.getRightBoundary = function() {
  return /** @type{?proto.apollo.hdmap.LaneBoundary} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.LaneBoundary, 4));
};


/**
 * @param {?proto.apollo.hdmap.LaneBoundary|undefined} value
 * @return {!proto.apollo.hdmap.Lane} returns this
*/
proto.apollo.hdmap.Lane.prototype.setRightBoundary = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearRightBoundary = function() {
  return this.setRightBoundary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Lane.prototype.hasRightBoundary = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double length = 5;
 * @return {number}
 */
proto.apollo.hdmap.Lane.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.setLength = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearLength = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Lane.prototype.hasLength = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double speed_limit = 6;
 * @return {number}
 */
proto.apollo.hdmap.Lane.prototype.getSpeedLimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.setSpeedLimit = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearSpeedLimit = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Lane.prototype.hasSpeedLimit = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated Id overlap_id = 7;
 * @return {!Array<!proto.apollo.hdmap.Id>}
 */
proto.apollo.hdmap.Lane.prototype.getOverlapIdList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.Id, 7));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Id>} value
 * @return {!proto.apollo.hdmap.Lane} returns this
*/
proto.apollo.hdmap.Lane.prototype.setOverlapIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.apollo.hdmap.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.Lane.prototype.addOverlapId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.apollo.hdmap.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearOverlapIdList = function() {
  return this.setOverlapIdList([]);
};


/**
 * repeated Id predecessor_id = 8;
 * @return {!Array<!proto.apollo.hdmap.Id>}
 */
proto.apollo.hdmap.Lane.prototype.getPredecessorIdList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.Id, 8));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Id>} value
 * @return {!proto.apollo.hdmap.Lane} returns this
*/
proto.apollo.hdmap.Lane.prototype.setPredecessorIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.apollo.hdmap.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.Lane.prototype.addPredecessorId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.apollo.hdmap.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearPredecessorIdList = function() {
  return this.setPredecessorIdList([]);
};


/**
 * repeated Id successor_id = 9;
 * @return {!Array<!proto.apollo.hdmap.Id>}
 */
proto.apollo.hdmap.Lane.prototype.getSuccessorIdList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.Id, 9));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Id>} value
 * @return {!proto.apollo.hdmap.Lane} returns this
*/
proto.apollo.hdmap.Lane.prototype.setSuccessorIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.apollo.hdmap.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.Lane.prototype.addSuccessorId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.apollo.hdmap.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearSuccessorIdList = function() {
  return this.setSuccessorIdList([]);
};


/**
 * repeated Id left_neighbor_forward_lane_id = 10;
 * @return {!Array<!proto.apollo.hdmap.Id>}
 */
proto.apollo.hdmap.Lane.prototype.getLeftNeighborForwardLaneIdList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.Id, 10));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Id>} value
 * @return {!proto.apollo.hdmap.Lane} returns this
*/
proto.apollo.hdmap.Lane.prototype.setLeftNeighborForwardLaneIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.apollo.hdmap.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.Lane.prototype.addLeftNeighborForwardLaneId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.apollo.hdmap.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearLeftNeighborForwardLaneIdList = function() {
  return this.setLeftNeighborForwardLaneIdList([]);
};


/**
 * repeated Id right_neighbor_forward_lane_id = 11;
 * @return {!Array<!proto.apollo.hdmap.Id>}
 */
proto.apollo.hdmap.Lane.prototype.getRightNeighborForwardLaneIdList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.Id, 11));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Id>} value
 * @return {!proto.apollo.hdmap.Lane} returns this
*/
proto.apollo.hdmap.Lane.prototype.setRightNeighborForwardLaneIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.apollo.hdmap.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.Lane.prototype.addRightNeighborForwardLaneId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.apollo.hdmap.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearRightNeighborForwardLaneIdList = function() {
  return this.setRightNeighborForwardLaneIdList([]);
};


/**
 * optional LaneType type = 12;
 * @return {!proto.apollo.hdmap.Lane.LaneType}
 */
proto.apollo.hdmap.Lane.prototype.getType = function() {
  return /** @type {!proto.apollo.hdmap.Lane.LaneType} */ (jspb.Message.getFieldWithDefault(this, 12, 1));
};


/**
 * @param {!proto.apollo.hdmap.Lane.LaneType} value
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.setType = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearType = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Lane.prototype.hasType = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional LaneTurn turn = 13;
 * @return {!proto.apollo.hdmap.Lane.LaneTurn}
 */
proto.apollo.hdmap.Lane.prototype.getTurn = function() {
  return /** @type {!proto.apollo.hdmap.Lane.LaneTurn} */ (jspb.Message.getFieldWithDefault(this, 13, 1));
};


/**
 * @param {!proto.apollo.hdmap.Lane.LaneTurn} value
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.setTurn = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearTurn = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Lane.prototype.hasTurn = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated Id left_neighbor_reverse_lane_id = 14;
 * @return {!Array<!proto.apollo.hdmap.Id>}
 */
proto.apollo.hdmap.Lane.prototype.getLeftNeighborReverseLaneIdList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.Id, 14));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Id>} value
 * @return {!proto.apollo.hdmap.Lane} returns this
*/
proto.apollo.hdmap.Lane.prototype.setLeftNeighborReverseLaneIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.apollo.hdmap.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.Lane.prototype.addLeftNeighborReverseLaneId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.apollo.hdmap.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearLeftNeighborReverseLaneIdList = function() {
  return this.setLeftNeighborReverseLaneIdList([]);
};


/**
 * repeated Id right_neighbor_reverse_lane_id = 15;
 * @return {!Array<!proto.apollo.hdmap.Id>}
 */
proto.apollo.hdmap.Lane.prototype.getRightNeighborReverseLaneIdList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.Id, 15));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Id>} value
 * @return {!proto.apollo.hdmap.Lane} returns this
*/
proto.apollo.hdmap.Lane.prototype.setRightNeighborReverseLaneIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.apollo.hdmap.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.Lane.prototype.addRightNeighborReverseLaneId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.apollo.hdmap.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearRightNeighborReverseLaneIdList = function() {
  return this.setRightNeighborReverseLaneIdList([]);
};


/**
 * optional Id junction_id = 16;
 * @return {?proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.Lane.prototype.getJunctionId = function() {
  return /** @type{?proto.apollo.hdmap.Id} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.Id, 16));
};


/**
 * @param {?proto.apollo.hdmap.Id|undefined} value
 * @return {!proto.apollo.hdmap.Lane} returns this
*/
proto.apollo.hdmap.Lane.prototype.setJunctionId = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearJunctionId = function() {
  return this.setJunctionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Lane.prototype.hasJunctionId = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * repeated LaneSampleAssociation left_sample = 17;
 * @return {!Array<!proto.apollo.hdmap.LaneSampleAssociation>}
 */
proto.apollo.hdmap.Lane.prototype.getLeftSampleList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.LaneSampleAssociation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.LaneSampleAssociation, 17));
};


/**
 * @param {!Array<!proto.apollo.hdmap.LaneSampleAssociation>} value
 * @return {!proto.apollo.hdmap.Lane} returns this
*/
proto.apollo.hdmap.Lane.prototype.setLeftSampleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.apollo.hdmap.LaneSampleAssociation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.LaneSampleAssociation}
 */
proto.apollo.hdmap.Lane.prototype.addLeftSample = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.apollo.hdmap.LaneSampleAssociation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearLeftSampleList = function() {
  return this.setLeftSampleList([]);
};


/**
 * repeated LaneSampleAssociation right_sample = 18;
 * @return {!Array<!proto.apollo.hdmap.LaneSampleAssociation>}
 */
proto.apollo.hdmap.Lane.prototype.getRightSampleList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.LaneSampleAssociation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.LaneSampleAssociation, 18));
};


/**
 * @param {!Array<!proto.apollo.hdmap.LaneSampleAssociation>} value
 * @return {!proto.apollo.hdmap.Lane} returns this
*/
proto.apollo.hdmap.Lane.prototype.setRightSampleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.apollo.hdmap.LaneSampleAssociation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.LaneSampleAssociation}
 */
proto.apollo.hdmap.Lane.prototype.addRightSample = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.apollo.hdmap.LaneSampleAssociation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearRightSampleList = function() {
  return this.setRightSampleList([]);
};


/**
 * optional LaneDirection direction = 19;
 * @return {!proto.apollo.hdmap.Lane.LaneDirection}
 */
proto.apollo.hdmap.Lane.prototype.getDirection = function() {
  return /** @type {!proto.apollo.hdmap.Lane.LaneDirection} */ (jspb.Message.getFieldWithDefault(this, 19, 1));
};


/**
 * @param {!proto.apollo.hdmap.Lane.LaneDirection} value
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.setDirection = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearDirection = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Lane.prototype.hasDirection = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * repeated LaneSampleAssociation left_road_sample = 20;
 * @return {!Array<!proto.apollo.hdmap.LaneSampleAssociation>}
 */
proto.apollo.hdmap.Lane.prototype.getLeftRoadSampleList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.LaneSampleAssociation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.LaneSampleAssociation, 20));
};


/**
 * @param {!Array<!proto.apollo.hdmap.LaneSampleAssociation>} value
 * @return {!proto.apollo.hdmap.Lane} returns this
*/
proto.apollo.hdmap.Lane.prototype.setLeftRoadSampleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.apollo.hdmap.LaneSampleAssociation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.LaneSampleAssociation}
 */
proto.apollo.hdmap.Lane.prototype.addLeftRoadSample = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.apollo.hdmap.LaneSampleAssociation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearLeftRoadSampleList = function() {
  return this.setLeftRoadSampleList([]);
};


/**
 * repeated LaneSampleAssociation right_road_sample = 21;
 * @return {!Array<!proto.apollo.hdmap.LaneSampleAssociation>}
 */
proto.apollo.hdmap.Lane.prototype.getRightRoadSampleList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.LaneSampleAssociation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.LaneSampleAssociation, 21));
};


/**
 * @param {!Array<!proto.apollo.hdmap.LaneSampleAssociation>} value
 * @return {!proto.apollo.hdmap.Lane} returns this
*/
proto.apollo.hdmap.Lane.prototype.setRightRoadSampleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 21, value);
};


/**
 * @param {!proto.apollo.hdmap.LaneSampleAssociation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.LaneSampleAssociation}
 */
proto.apollo.hdmap.Lane.prototype.addRightRoadSample = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 21, opt_value, proto.apollo.hdmap.LaneSampleAssociation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearRightRoadSampleList = function() {
  return this.setRightRoadSampleList([]);
};


/**
 * repeated Id self_reverse_lane_id = 22;
 * @return {!Array<!proto.apollo.hdmap.Id>}
 */
proto.apollo.hdmap.Lane.prototype.getSelfReverseLaneIdList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.Id, 22));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Id>} value
 * @return {!proto.apollo.hdmap.Lane} returns this
*/
proto.apollo.hdmap.Lane.prototype.setSelfReverseLaneIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 22, value);
};


/**
 * @param {!proto.apollo.hdmap.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.Lane.prototype.addSelfReverseLaneId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 22, opt_value, proto.apollo.hdmap.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Lane} returns this
 */
proto.apollo.hdmap.Lane.prototype.clearSelfReverseLaneIdList = function() {
  return this.setSelfReverseLaneIdList([]);
};


