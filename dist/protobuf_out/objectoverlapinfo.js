// source: modules/map/proto/map_overlap.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.apollo.hdmap.ObjectOverlapInfo');
goog.provide('proto.apollo.hdmap.ObjectOverlapInfo.OverlapInfoCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.apollo.hdmap.ClearAreaOverlapInfo');
goog.require('proto.apollo.hdmap.CrosswalkOverlapInfo');
goog.require('proto.apollo.hdmap.Id');
goog.require('proto.apollo.hdmap.JunctionOverlapInfo');
goog.require('proto.apollo.hdmap.LaneOverlapInfo');
goog.require('proto.apollo.hdmap.PNCJunctionOverlapInfo');
goog.require('proto.apollo.hdmap.ParkingSpaceOverlapInfo');
goog.require('proto.apollo.hdmap.RSUOverlapInfo');
goog.require('proto.apollo.hdmap.SignalOverlapInfo');
goog.require('proto.apollo.hdmap.SpeedBumpOverlapInfo');
goog.require('proto.apollo.hdmap.StopSignOverlapInfo');
goog.require('proto.apollo.hdmap.YieldOverlapInfo');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.ObjectOverlapInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_);
};
goog.inherits(proto.apollo.hdmap.ObjectOverlapInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.ObjectOverlapInfo.displayName = 'proto.apollo.hdmap.ObjectOverlapInfo';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_ = [[3,4,5,6,7,8,9,10,11,12,13]];

/**
 * @enum {number}
 */
proto.apollo.hdmap.ObjectOverlapInfo.OverlapInfoCase = {
  OVERLAP_INFO_NOT_SET: 0,
  LANE_OVERLAP_INFO: 3,
  SIGNAL_OVERLAP_INFO: 4,
  STOP_SIGN_OVERLAP_INFO: 5,
  CROSSWALK_OVERLAP_INFO: 6,
  JUNCTION_OVERLAP_INFO: 7,
  YIELD_SIGN_OVERLAP_INFO: 8,
  CLEAR_AREA_OVERLAP_INFO: 9,
  SPEED_BUMP_OVERLAP_INFO: 10,
  PARKING_SPACE_OVERLAP_INFO: 11,
  PNC_JUNCTION_OVERLAP_INFO: 12,
  RSU_OVERLAP_INFO: 13
};

/**
 * @return {proto.apollo.hdmap.ObjectOverlapInfo.OverlapInfoCase}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getOverlapInfoCase = function() {
  return /** @type {proto.apollo.hdmap.ObjectOverlapInfo.OverlapInfoCase} */(jspb.Message.computeOneofCase(this, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.ObjectOverlapInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.ObjectOverlapInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.ObjectOverlapInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.apollo.hdmap.Id.toObject(includeInstance, f),
    laneOverlapInfo: (f = msg.getLaneOverlapInfo()) && proto.apollo.hdmap.LaneOverlapInfo.toObject(includeInstance, f),
    signalOverlapInfo: (f = msg.getSignalOverlapInfo()) && proto.apollo.hdmap.SignalOverlapInfo.toObject(includeInstance, f),
    stopSignOverlapInfo: (f = msg.getStopSignOverlapInfo()) && proto.apollo.hdmap.StopSignOverlapInfo.toObject(includeInstance, f),
    crosswalkOverlapInfo: (f = msg.getCrosswalkOverlapInfo()) && proto.apollo.hdmap.CrosswalkOverlapInfo.toObject(includeInstance, f),
    junctionOverlapInfo: (f = msg.getJunctionOverlapInfo()) && proto.apollo.hdmap.JunctionOverlapInfo.toObject(includeInstance, f),
    yieldSignOverlapInfo: (f = msg.getYieldSignOverlapInfo()) && proto.apollo.hdmap.YieldOverlapInfo.toObject(includeInstance, f),
    clearAreaOverlapInfo: (f = msg.getClearAreaOverlapInfo()) && proto.apollo.hdmap.ClearAreaOverlapInfo.toObject(includeInstance, f),
    speedBumpOverlapInfo: (f = msg.getSpeedBumpOverlapInfo()) && proto.apollo.hdmap.SpeedBumpOverlapInfo.toObject(includeInstance, f),
    parkingSpaceOverlapInfo: (f = msg.getParkingSpaceOverlapInfo()) && proto.apollo.hdmap.ParkingSpaceOverlapInfo.toObject(includeInstance, f),
    pncJunctionOverlapInfo: (f = msg.getPncJunctionOverlapInfo()) && proto.apollo.hdmap.PNCJunctionOverlapInfo.toObject(includeInstance, f),
    rsuOverlapInfo: (f = msg.getRsuOverlapInfo()) && proto.apollo.hdmap.RSUOverlapInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectOverlapInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.ObjectOverlapInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.laneOverlapInfo;

  /** @type {?|undefined} */
  this.signalOverlapInfo;

  /** @type {?|undefined} */
  this.stopSignOverlapInfo;

  /** @type {?|undefined} */
  this.crosswalkOverlapInfo;

  /** @type {?|undefined} */
  this.junctionOverlapInfo;

  /** @type {?|undefined} */
  this.yieldSignOverlapInfo;

  /** @type {?|undefined} */
  this.clearAreaOverlapInfo;

  /** @type {?|undefined} */
  this.speedBumpOverlapInfo;

  /** @type {?|undefined} */
  this.parkingSpaceOverlapInfo;

  /** @type {?|undefined} */
  this.pncJunctionOverlapInfo;

  /** @type {?|undefined} */
  this.rsuOverlapInfo;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.ObjectOverlapInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.ObjectOverlapInfo();
  obj.id && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.hdmap.Id.fromObject(obj.id));
  obj.laneOverlapInfo && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.hdmap.LaneOverlapInfo.fromObject(obj.laneOverlapInfo));
  obj.signalOverlapInfo && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.hdmap.SignalOverlapInfo.fromObject(obj.signalOverlapInfo));
  obj.stopSignOverlapInfo && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.hdmap.StopSignOverlapInfo.fromObject(obj.stopSignOverlapInfo));
  obj.crosswalkOverlapInfo && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.hdmap.CrosswalkOverlapInfo.fromObject(obj.crosswalkOverlapInfo));
  obj.junctionOverlapInfo && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.hdmap.JunctionOverlapInfo.fromObject(obj.junctionOverlapInfo));
  obj.yieldSignOverlapInfo && jspb.Message.setWrapperField(
      msg, 8, proto.apollo.hdmap.YieldOverlapInfo.fromObject(obj.yieldSignOverlapInfo));
  obj.clearAreaOverlapInfo && jspb.Message.setWrapperField(
      msg, 9, proto.apollo.hdmap.ClearAreaOverlapInfo.fromObject(obj.clearAreaOverlapInfo));
  obj.speedBumpOverlapInfo && jspb.Message.setWrapperField(
      msg, 10, proto.apollo.hdmap.SpeedBumpOverlapInfo.fromObject(obj.speedBumpOverlapInfo));
  obj.parkingSpaceOverlapInfo && jspb.Message.setWrapperField(
      msg, 11, proto.apollo.hdmap.ParkingSpaceOverlapInfo.fromObject(obj.parkingSpaceOverlapInfo));
  obj.pncJunctionOverlapInfo && jspb.Message.setWrapperField(
      msg, 12, proto.apollo.hdmap.PNCJunctionOverlapInfo.fromObject(obj.pncJunctionOverlapInfo));
  obj.rsuOverlapInfo && jspb.Message.setWrapperField(
      msg, 13, proto.apollo.hdmap.RSUOverlapInfo.fromObject(obj.rsuOverlapInfo));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.ObjectOverlapInfo;
  return proto.apollo.hdmap.ObjectOverlapInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.ObjectOverlapInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.hdmap.Id;
      reader.readMessage(value,proto.apollo.hdmap.Id.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 3:
      var value = new proto.apollo.hdmap.LaneOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.LaneOverlapInfo.deserializeBinaryFromReader);
      msg.setLaneOverlapInfo(value);
      break;
    case 4:
      var value = new proto.apollo.hdmap.SignalOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.SignalOverlapInfo.deserializeBinaryFromReader);
      msg.setSignalOverlapInfo(value);
      break;
    case 5:
      var value = new proto.apollo.hdmap.StopSignOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.StopSignOverlapInfo.deserializeBinaryFromReader);
      msg.setStopSignOverlapInfo(value);
      break;
    case 6:
      var value = new proto.apollo.hdmap.CrosswalkOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.CrosswalkOverlapInfo.deserializeBinaryFromReader);
      msg.setCrosswalkOverlapInfo(value);
      break;
    case 7:
      var value = new proto.apollo.hdmap.JunctionOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.JunctionOverlapInfo.deserializeBinaryFromReader);
      msg.setJunctionOverlapInfo(value);
      break;
    case 8:
      var value = new proto.apollo.hdmap.YieldOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.YieldOverlapInfo.deserializeBinaryFromReader);
      msg.setYieldSignOverlapInfo(value);
      break;
    case 9:
      var value = new proto.apollo.hdmap.ClearAreaOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.ClearAreaOverlapInfo.deserializeBinaryFromReader);
      msg.setClearAreaOverlapInfo(value);
      break;
    case 10:
      var value = new proto.apollo.hdmap.SpeedBumpOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.SpeedBumpOverlapInfo.deserializeBinaryFromReader);
      msg.setSpeedBumpOverlapInfo(value);
      break;
    case 11:
      var value = new proto.apollo.hdmap.ParkingSpaceOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.ParkingSpaceOverlapInfo.deserializeBinaryFromReader);
      msg.setParkingSpaceOverlapInfo(value);
      break;
    case 12:
      var value = new proto.apollo.hdmap.PNCJunctionOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.PNCJunctionOverlapInfo.deserializeBinaryFromReader);
      msg.setPncJunctionOverlapInfo(value);
      break;
    case 13:
      var value = new proto.apollo.hdmap.RSUOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.RSUOverlapInfo.deserializeBinaryFromReader);
      msg.setRsuOverlapInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.ObjectOverlapInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.ObjectOverlapInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.ObjectOverlapInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.hdmap.Id.serializeBinaryToWriter
    );
  }
  f = message.getLaneOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.hdmap.LaneOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getSignalOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.hdmap.SignalOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getStopSignOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.hdmap.StopSignOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getCrosswalkOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.hdmap.CrosswalkOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getJunctionOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.hdmap.JunctionOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getYieldSignOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.apollo.hdmap.YieldOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getClearAreaOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.apollo.hdmap.ClearAreaOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getSpeedBumpOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.apollo.hdmap.SpeedBumpOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getParkingSpaceOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.apollo.hdmap.ParkingSpaceOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getPncJunctionOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.apollo.hdmap.PNCJunctionOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getRsuOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.apollo.hdmap.RSUOverlapInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Id id = 1;
 * @return {?proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getId = function() {
  return /** @type{?proto.apollo.hdmap.Id} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.Id, 1));
};


/**
 * @param {?proto.apollo.hdmap.Id|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LaneOverlapInfo lane_overlap_info = 3;
 * @return {?proto.apollo.hdmap.LaneOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getLaneOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.LaneOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.LaneOverlapInfo, 3));
};


/**
 * @param {?proto.apollo.hdmap.LaneOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setLaneOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearLaneOverlapInfo = function() {
  return this.setLaneOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasLaneOverlapInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SignalOverlapInfo signal_overlap_info = 4;
 * @return {?proto.apollo.hdmap.SignalOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getSignalOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.SignalOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.SignalOverlapInfo, 4));
};


/**
 * @param {?proto.apollo.hdmap.SignalOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setSignalOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearSignalOverlapInfo = function() {
  return this.setSignalOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasSignalOverlapInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional StopSignOverlapInfo stop_sign_overlap_info = 5;
 * @return {?proto.apollo.hdmap.StopSignOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getStopSignOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.StopSignOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.StopSignOverlapInfo, 5));
};


/**
 * @param {?proto.apollo.hdmap.StopSignOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setStopSignOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearStopSignOverlapInfo = function() {
  return this.setStopSignOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasStopSignOverlapInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CrosswalkOverlapInfo crosswalk_overlap_info = 6;
 * @return {?proto.apollo.hdmap.CrosswalkOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getCrosswalkOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.CrosswalkOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.CrosswalkOverlapInfo, 6));
};


/**
 * @param {?proto.apollo.hdmap.CrosswalkOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setCrosswalkOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearCrosswalkOverlapInfo = function() {
  return this.setCrosswalkOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasCrosswalkOverlapInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional JunctionOverlapInfo junction_overlap_info = 7;
 * @return {?proto.apollo.hdmap.JunctionOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getJunctionOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.JunctionOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.JunctionOverlapInfo, 7));
};


/**
 * @param {?proto.apollo.hdmap.JunctionOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setJunctionOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearJunctionOverlapInfo = function() {
  return this.setJunctionOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasJunctionOverlapInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional YieldOverlapInfo yield_sign_overlap_info = 8;
 * @return {?proto.apollo.hdmap.YieldOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getYieldSignOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.YieldOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.YieldOverlapInfo, 8));
};


/**
 * @param {?proto.apollo.hdmap.YieldOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setYieldSignOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearYieldSignOverlapInfo = function() {
  return this.setYieldSignOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasYieldSignOverlapInfo = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ClearAreaOverlapInfo clear_area_overlap_info = 9;
 * @return {?proto.apollo.hdmap.ClearAreaOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getClearAreaOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.ClearAreaOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.ClearAreaOverlapInfo, 9));
};


/**
 * @param {?proto.apollo.hdmap.ClearAreaOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setClearAreaOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearClearAreaOverlapInfo = function() {
  return this.setClearAreaOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasClearAreaOverlapInfo = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional SpeedBumpOverlapInfo speed_bump_overlap_info = 10;
 * @return {?proto.apollo.hdmap.SpeedBumpOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getSpeedBumpOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.SpeedBumpOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.SpeedBumpOverlapInfo, 10));
};


/**
 * @param {?proto.apollo.hdmap.SpeedBumpOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setSpeedBumpOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearSpeedBumpOverlapInfo = function() {
  return this.setSpeedBumpOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasSpeedBumpOverlapInfo = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ParkingSpaceOverlapInfo parking_space_overlap_info = 11;
 * @return {?proto.apollo.hdmap.ParkingSpaceOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getParkingSpaceOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.ParkingSpaceOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.ParkingSpaceOverlapInfo, 11));
};


/**
 * @param {?proto.apollo.hdmap.ParkingSpaceOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setParkingSpaceOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearParkingSpaceOverlapInfo = function() {
  return this.setParkingSpaceOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasParkingSpaceOverlapInfo = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional PNCJunctionOverlapInfo pnc_junction_overlap_info = 12;
 * @return {?proto.apollo.hdmap.PNCJunctionOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getPncJunctionOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.PNCJunctionOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.PNCJunctionOverlapInfo, 12));
};


/**
 * @param {?proto.apollo.hdmap.PNCJunctionOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setPncJunctionOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearPncJunctionOverlapInfo = function() {
  return this.setPncJunctionOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasPncJunctionOverlapInfo = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional RSUOverlapInfo rsu_overlap_info = 13;
 * @return {?proto.apollo.hdmap.RSUOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getRsuOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.RSUOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.RSUOverlapInfo, 13));
};


/**
 * @param {?proto.apollo.hdmap.RSUOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setRsuOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearRsuOverlapInfo = function() {
  return this.setRsuOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasRsuOverlapInfo = function() {
  return jspb.Message.getField(this, 13) != null;
};


