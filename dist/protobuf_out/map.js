// source: modules/map/proto/map.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.apollo.hdmap.Map');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.apollo.hdmap.ClearArea');
goog.require('proto.apollo.hdmap.Crosswalk');
goog.require('proto.apollo.hdmap.Header');
goog.require('proto.apollo.hdmap.Junction');
goog.require('proto.apollo.hdmap.Lane');
goog.require('proto.apollo.hdmap.Overlap');
goog.require('proto.apollo.hdmap.PNCJunction');
goog.require('proto.apollo.hdmap.ParkingSpace');
goog.require('proto.apollo.hdmap.RSU');
goog.require('proto.apollo.hdmap.Road');
goog.require('proto.apollo.hdmap.Signal');
goog.require('proto.apollo.hdmap.SpeedBump');
goog.require('proto.apollo.hdmap.StopSign');
goog.require('proto.apollo.hdmap.YieldSign');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.Map = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.hdmap.Map.repeatedFields_, null);
};
goog.inherits(proto.apollo.hdmap.Map, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.Map.displayName = 'proto.apollo.hdmap.Map';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.hdmap.Map.repeatedFields_ = [2,3,4,5,6,7,8,9,10,11,12,13,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.Map.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.Map.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.Map} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.Map.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.apollo.hdmap.Header.toObject(includeInstance, f),
    crosswalkList: jspb.Message.toObjectList(msg.getCrosswalkList(),
    proto.apollo.hdmap.Crosswalk.toObject, includeInstance),
    junctionList: jspb.Message.toObjectList(msg.getJunctionList(),
    proto.apollo.hdmap.Junction.toObject, includeInstance),
    laneList: jspb.Message.toObjectList(msg.getLaneList(),
    proto.apollo.hdmap.Lane.toObject, includeInstance),
    stopSignList: jspb.Message.toObjectList(msg.getStopSignList(),
    proto.apollo.hdmap.StopSign.toObject, includeInstance),
    signalList: jspb.Message.toObjectList(msg.getSignalList(),
    proto.apollo.hdmap.Signal.toObject, includeInstance),
    yieldList: jspb.Message.toObjectList(msg.getYieldList(),
    proto.apollo.hdmap.YieldSign.toObject, includeInstance),
    overlapList: jspb.Message.toObjectList(msg.getOverlapList(),
    proto.apollo.hdmap.Overlap.toObject, includeInstance),
    clearAreaList: jspb.Message.toObjectList(msg.getClearAreaList(),
    proto.apollo.hdmap.ClearArea.toObject, includeInstance),
    speedBumpList: jspb.Message.toObjectList(msg.getSpeedBumpList(),
    proto.apollo.hdmap.SpeedBump.toObject, includeInstance),
    roadList: jspb.Message.toObjectList(msg.getRoadList(),
    proto.apollo.hdmap.Road.toObject, includeInstance),
    parkingSpaceList: jspb.Message.toObjectList(msg.getParkingSpaceList(),
    proto.apollo.hdmap.ParkingSpace.toObject, includeInstance),
    pncJunctionList: jspb.Message.toObjectList(msg.getPncJunctionList(),
    proto.apollo.hdmap.PNCJunction.toObject, includeInstance),
    rsuList: jspb.Message.toObjectList(msg.getRsuList(),
    proto.apollo.hdmap.RSU.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Map as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.Map.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.crosswalkList;

  /** @type {?|undefined} */
  this.junctionList;

  /** @type {?|undefined} */
  this.laneList;

  /** @type {?|undefined} */
  this.stopSignList;

  /** @type {?|undefined} */
  this.signalList;

  /** @type {?|undefined} */
  this.yieldList;

  /** @type {?|undefined} */
  this.overlapList;

  /** @type {?|undefined} */
  this.clearAreaList;

  /** @type {?|undefined} */
  this.speedBumpList;

  /** @type {?|undefined} */
  this.roadList;

  /** @type {?|undefined} */
  this.parkingSpaceList;

  /** @type {?|undefined} */
  this.pncJunctionList;

  /** @type {?|undefined} */
  this.rsuList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.Map.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.Map}
 */
proto.apollo.hdmap.Map.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.Map();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.hdmap.Header.fromObject(obj.header));
  obj.crosswalkList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.crosswalkList.map(
          proto.apollo.hdmap.Crosswalk.fromObject));
  obj.junctionList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.junctionList.map(
          proto.apollo.hdmap.Junction.fromObject));
  obj.laneList && jspb.Message.setRepeatedWrapperField(
      msg, 4, obj.laneList.map(
          proto.apollo.hdmap.Lane.fromObject));
  obj.stopSignList && jspb.Message.setRepeatedWrapperField(
      msg, 5, obj.stopSignList.map(
          proto.apollo.hdmap.StopSign.fromObject));
  obj.signalList && jspb.Message.setRepeatedWrapperField(
      msg, 6, obj.signalList.map(
          proto.apollo.hdmap.Signal.fromObject));
  obj.yieldList && jspb.Message.setRepeatedWrapperField(
      msg, 7, obj.yieldList.map(
          proto.apollo.hdmap.YieldSign.fromObject));
  obj.overlapList && jspb.Message.setRepeatedWrapperField(
      msg, 8, obj.overlapList.map(
          proto.apollo.hdmap.Overlap.fromObject));
  obj.clearAreaList && jspb.Message.setRepeatedWrapperField(
      msg, 9, obj.clearAreaList.map(
          proto.apollo.hdmap.ClearArea.fromObject));
  obj.speedBumpList && jspb.Message.setRepeatedWrapperField(
      msg, 10, obj.speedBumpList.map(
          proto.apollo.hdmap.SpeedBump.fromObject));
  obj.roadList && jspb.Message.setRepeatedWrapperField(
      msg, 11, obj.roadList.map(
          proto.apollo.hdmap.Road.fromObject));
  obj.parkingSpaceList && jspb.Message.setRepeatedWrapperField(
      msg, 12, obj.parkingSpaceList.map(
          proto.apollo.hdmap.ParkingSpace.fromObject));
  obj.pncJunctionList && jspb.Message.setRepeatedWrapperField(
      msg, 13, obj.pncJunctionList.map(
          proto.apollo.hdmap.PNCJunction.fromObject));
  obj.rsuList && jspb.Message.setRepeatedWrapperField(
      msg, 14, obj.rsuList.map(
          proto.apollo.hdmap.RSU.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.Map}
 */
proto.apollo.hdmap.Map.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.Map;
  return proto.apollo.hdmap.Map.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.Map} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.Map}
 */
proto.apollo.hdmap.Map.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.hdmap.Header;
      reader.readMessage(value,proto.apollo.hdmap.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.apollo.hdmap.Crosswalk;
      reader.readMessage(value,proto.apollo.hdmap.Crosswalk.deserializeBinaryFromReader);
      msg.addCrosswalk(value);
      break;
    case 3:
      var value = new proto.apollo.hdmap.Junction;
      reader.readMessage(value,proto.apollo.hdmap.Junction.deserializeBinaryFromReader);
      msg.addJunction(value);
      break;
    case 4:
      var value = new proto.apollo.hdmap.Lane;
      reader.readMessage(value,proto.apollo.hdmap.Lane.deserializeBinaryFromReader);
      msg.addLane(value);
      break;
    case 5:
      var value = new proto.apollo.hdmap.StopSign;
      reader.readMessage(value,proto.apollo.hdmap.StopSign.deserializeBinaryFromReader);
      msg.addStopSign(value);
      break;
    case 6:
      var value = new proto.apollo.hdmap.Signal;
      reader.readMessage(value,proto.apollo.hdmap.Signal.deserializeBinaryFromReader);
      msg.addSignal(value);
      break;
    case 7:
      var value = new proto.apollo.hdmap.YieldSign;
      reader.readMessage(value,proto.apollo.hdmap.YieldSign.deserializeBinaryFromReader);
      msg.addYield(value);
      break;
    case 8:
      var value = new proto.apollo.hdmap.Overlap;
      reader.readMessage(value,proto.apollo.hdmap.Overlap.deserializeBinaryFromReader);
      msg.addOverlap(value);
      break;
    case 9:
      var value = new proto.apollo.hdmap.ClearArea;
      reader.readMessage(value,proto.apollo.hdmap.ClearArea.deserializeBinaryFromReader);
      msg.addClearArea(value);
      break;
    case 10:
      var value = new proto.apollo.hdmap.SpeedBump;
      reader.readMessage(value,proto.apollo.hdmap.SpeedBump.deserializeBinaryFromReader);
      msg.addSpeedBump(value);
      break;
    case 11:
      var value = new proto.apollo.hdmap.Road;
      reader.readMessage(value,proto.apollo.hdmap.Road.deserializeBinaryFromReader);
      msg.addRoad(value);
      break;
    case 12:
      var value = new proto.apollo.hdmap.ParkingSpace;
      reader.readMessage(value,proto.apollo.hdmap.ParkingSpace.deserializeBinaryFromReader);
      msg.addParkingSpace(value);
      break;
    case 13:
      var value = new proto.apollo.hdmap.PNCJunction;
      reader.readMessage(value,proto.apollo.hdmap.PNCJunction.deserializeBinaryFromReader);
      msg.addPncJunction(value);
      break;
    case 14:
      var value = new proto.apollo.hdmap.RSU;
      reader.readMessage(value,proto.apollo.hdmap.RSU.deserializeBinaryFromReader);
      msg.addRsu(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.Map.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.Map.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.Map} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.Map.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.hdmap.Header.serializeBinaryToWriter
    );
  }
  f = message.getCrosswalkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.hdmap.Crosswalk.serializeBinaryToWriter
    );
  }
  f = message.getJunctionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.hdmap.Junction.serializeBinaryToWriter
    );
  }
  f = message.getLaneList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.apollo.hdmap.Lane.serializeBinaryToWriter
    );
  }
  f = message.getStopSignList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.apollo.hdmap.StopSign.serializeBinaryToWriter
    );
  }
  f = message.getSignalList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.apollo.hdmap.Signal.serializeBinaryToWriter
    );
  }
  f = message.getYieldList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.apollo.hdmap.YieldSign.serializeBinaryToWriter
    );
  }
  f = message.getOverlapList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.apollo.hdmap.Overlap.serializeBinaryToWriter
    );
  }
  f = message.getClearAreaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.apollo.hdmap.ClearArea.serializeBinaryToWriter
    );
  }
  f = message.getSpeedBumpList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.apollo.hdmap.SpeedBump.serializeBinaryToWriter
    );
  }
  f = message.getRoadList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.apollo.hdmap.Road.serializeBinaryToWriter
    );
  }
  f = message.getParkingSpaceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.apollo.hdmap.ParkingSpace.serializeBinaryToWriter
    );
  }
  f = message.getPncJunctionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.apollo.hdmap.PNCJunction.serializeBinaryToWriter
    );
  }
  f = message.getRsuList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.apollo.hdmap.RSU.serializeBinaryToWriter
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.apollo.hdmap.Header}
 */
proto.apollo.hdmap.Map.prototype.getHeader = function() {
  return /** @type{?proto.apollo.hdmap.Header} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.Header, 1));
};


/**
 * @param {?proto.apollo.hdmap.Header|undefined} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Map.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Crosswalk crosswalk = 2;
 * @return {!Array<!proto.apollo.hdmap.Crosswalk>}
 */
proto.apollo.hdmap.Map.prototype.getCrosswalkList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Crosswalk>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.Crosswalk, 2));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Crosswalk>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setCrosswalkList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.hdmap.Crosswalk=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Crosswalk}
 */
proto.apollo.hdmap.Map.prototype.addCrosswalk = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.hdmap.Crosswalk, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearCrosswalkList = function() {
  return this.setCrosswalkList([]);
};


/**
 * repeated Junction junction = 3;
 * @return {!Array<!proto.apollo.hdmap.Junction>}
 */
proto.apollo.hdmap.Map.prototype.getJunctionList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Junction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.Junction, 3));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Junction>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setJunctionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.hdmap.Junction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Junction}
 */
proto.apollo.hdmap.Map.prototype.addJunction = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.hdmap.Junction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearJunctionList = function() {
  return this.setJunctionList([]);
};


/**
 * repeated Lane lane = 4;
 * @return {!Array<!proto.apollo.hdmap.Lane>}
 */
proto.apollo.hdmap.Map.prototype.getLaneList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Lane>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.Lane, 4));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Lane>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setLaneList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.apollo.hdmap.Lane=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Lane}
 */
proto.apollo.hdmap.Map.prototype.addLane = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.apollo.hdmap.Lane, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearLaneList = function() {
  return this.setLaneList([]);
};


/**
 * repeated StopSign stop_sign = 5;
 * @return {!Array<!proto.apollo.hdmap.StopSign>}
 */
proto.apollo.hdmap.Map.prototype.getStopSignList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.StopSign>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.StopSign, 5));
};


/**
 * @param {!Array<!proto.apollo.hdmap.StopSign>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setStopSignList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.apollo.hdmap.StopSign=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.StopSign}
 */
proto.apollo.hdmap.Map.prototype.addStopSign = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.apollo.hdmap.StopSign, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearStopSignList = function() {
  return this.setStopSignList([]);
};


/**
 * repeated Signal signal = 6;
 * @return {!Array<!proto.apollo.hdmap.Signal>}
 */
proto.apollo.hdmap.Map.prototype.getSignalList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Signal>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.Signal, 6));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Signal>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setSignalList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.apollo.hdmap.Signal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Signal}
 */
proto.apollo.hdmap.Map.prototype.addSignal = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.apollo.hdmap.Signal, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearSignalList = function() {
  return this.setSignalList([]);
};


/**
 * repeated YieldSign yield = 7;
 * @return {!Array<!proto.apollo.hdmap.YieldSign>}
 */
proto.apollo.hdmap.Map.prototype.getYieldList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.YieldSign>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.YieldSign, 7));
};


/**
 * @param {!Array<!proto.apollo.hdmap.YieldSign>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setYieldList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.apollo.hdmap.YieldSign=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.YieldSign}
 */
proto.apollo.hdmap.Map.prototype.addYield = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.apollo.hdmap.YieldSign, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearYieldList = function() {
  return this.setYieldList([]);
};


/**
 * repeated Overlap overlap = 8;
 * @return {!Array<!proto.apollo.hdmap.Overlap>}
 */
proto.apollo.hdmap.Map.prototype.getOverlapList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Overlap>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.Overlap, 8));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Overlap>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setOverlapList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.apollo.hdmap.Overlap=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Overlap}
 */
proto.apollo.hdmap.Map.prototype.addOverlap = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.apollo.hdmap.Overlap, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearOverlapList = function() {
  return this.setOverlapList([]);
};


/**
 * repeated ClearArea clear_area = 9;
 * @return {!Array<!proto.apollo.hdmap.ClearArea>}
 */
proto.apollo.hdmap.Map.prototype.getClearAreaList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.ClearArea>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.ClearArea, 9));
};


/**
 * @param {!Array<!proto.apollo.hdmap.ClearArea>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setClearAreaList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.apollo.hdmap.ClearArea=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.ClearArea}
 */
proto.apollo.hdmap.Map.prototype.addClearArea = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.apollo.hdmap.ClearArea, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearClearAreaList = function() {
  return this.setClearAreaList([]);
};


/**
 * repeated SpeedBump speed_bump = 10;
 * @return {!Array<!proto.apollo.hdmap.SpeedBump>}
 */
proto.apollo.hdmap.Map.prototype.getSpeedBumpList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.SpeedBump>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.SpeedBump, 10));
};


/**
 * @param {!Array<!proto.apollo.hdmap.SpeedBump>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setSpeedBumpList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.apollo.hdmap.SpeedBump=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.SpeedBump}
 */
proto.apollo.hdmap.Map.prototype.addSpeedBump = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.apollo.hdmap.SpeedBump, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearSpeedBumpList = function() {
  return this.setSpeedBumpList([]);
};


/**
 * repeated Road road = 11;
 * @return {!Array<!proto.apollo.hdmap.Road>}
 */
proto.apollo.hdmap.Map.prototype.getRoadList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Road>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.Road, 11));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Road>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setRoadList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.apollo.hdmap.Road=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Road}
 */
proto.apollo.hdmap.Map.prototype.addRoad = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.apollo.hdmap.Road, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearRoadList = function() {
  return this.setRoadList([]);
};


/**
 * repeated ParkingSpace parking_space = 12;
 * @return {!Array<!proto.apollo.hdmap.ParkingSpace>}
 */
proto.apollo.hdmap.Map.prototype.getParkingSpaceList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.ParkingSpace>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.ParkingSpace, 12));
};


/**
 * @param {!Array<!proto.apollo.hdmap.ParkingSpace>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setParkingSpaceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.apollo.hdmap.ParkingSpace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.ParkingSpace}
 */
proto.apollo.hdmap.Map.prototype.addParkingSpace = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.apollo.hdmap.ParkingSpace, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearParkingSpaceList = function() {
  return this.setParkingSpaceList([]);
};


/**
 * repeated PNCJunction pnc_junction = 13;
 * @return {!Array<!proto.apollo.hdmap.PNCJunction>}
 */
proto.apollo.hdmap.Map.prototype.getPncJunctionList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.PNCJunction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.PNCJunction, 13));
};


/**
 * @param {!Array<!proto.apollo.hdmap.PNCJunction>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setPncJunctionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.apollo.hdmap.PNCJunction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.PNCJunction}
 */
proto.apollo.hdmap.Map.prototype.addPncJunction = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.apollo.hdmap.PNCJunction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearPncJunctionList = function() {
  return this.setPncJunctionList([]);
};


/**
 * repeated RSU rsu = 14;
 * @return {!Array<!proto.apollo.hdmap.RSU>}
 */
proto.apollo.hdmap.Map.prototype.getRsuList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.RSU>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.RSU, 14));
};


/**
 * @param {!Array<!proto.apollo.hdmap.RSU>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setRsuList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.apollo.hdmap.RSU=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.RSU}
 */
proto.apollo.hdmap.Map.prototype.addRsu = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.apollo.hdmap.RSU, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearRsuList = function() {
  return this.setRsuList([]);
};


