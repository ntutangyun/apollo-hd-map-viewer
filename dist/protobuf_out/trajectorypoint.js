// source: modules/common/proto/pnc_point.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.apollo.common.TrajectoryPoint');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.apollo.common.GaussianInfo');
goog.require('proto.apollo.common.PathPoint');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.TrajectoryPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.common.TrajectoryPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.TrajectoryPoint.displayName = 'proto.apollo.common.TrajectoryPoint';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.TrajectoryPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.TrajectoryPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.TrajectoryPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.TrajectoryPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathPoint: (f = msg.getPathPoint()) && proto.apollo.common.PathPoint.toObject(includeInstance, f),
    v: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    a: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    relativeTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    da: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    steer: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    gaussianInfo: (f = msg.getGaussianInfo()) && proto.apollo.common.GaussianInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrajectoryPoint as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.common.TrajectoryPoint.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pathPoint;

  /** @type {?|undefined} */
  this.v;

  /** @type {?|undefined} */
  this.a;

  /** @type {?|undefined} */
  this.relativeTime;

  /** @type {?|undefined} */
  this.da;

  /** @type {?|undefined} */
  this.steer;

  /** @type {?|undefined} */
  this.gaussianInfo;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.common.TrajectoryPoint.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.common.TrajectoryPoint.fromObject = function(obj) {
  var msg = new proto.apollo.common.TrajectoryPoint();
  obj.pathPoint && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.common.PathPoint.fromObject(obj.pathPoint));
  obj.v != null && jspb.Message.setField(msg, 2, obj.v);
  obj.a != null && jspb.Message.setField(msg, 3, obj.a);
  obj.relativeTime != null && jspb.Message.setField(msg, 4, obj.relativeTime);
  obj.da != null && jspb.Message.setField(msg, 5, obj.da);
  obj.steer != null && jspb.Message.setField(msg, 6, obj.steer);
  obj.gaussianInfo && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.common.GaussianInfo.fromObject(obj.gaussianInfo));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.common.TrajectoryPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.TrajectoryPoint;
  return proto.apollo.common.TrajectoryPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.TrajectoryPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.common.TrajectoryPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.common.PathPoint;
      reader.readMessage(value,proto.apollo.common.PathPoint.deserializeBinaryFromReader);
      msg.setPathPoint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setV(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setA(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRelativeTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDa(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteer(value);
      break;
    case 7:
      var value = new proto.apollo.common.GaussianInfo;
      reader.readMessage(value,proto.apollo.common.GaussianInfo.deserializeBinaryFromReader);
      msg.setGaussianInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.TrajectoryPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.TrajectoryPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.TrajectoryPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.TrajectoryPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.common.PathPoint.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getGaussianInfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.common.GaussianInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional PathPoint path_point = 1;
 * @return {?proto.apollo.common.PathPoint}
 */
proto.apollo.common.TrajectoryPoint.prototype.getPathPoint = function() {
  return /** @type{?proto.apollo.common.PathPoint} */ (
    jspb.Message.getWrapperField(this, proto.apollo.common.PathPoint, 1));
};


/**
 * @param {?proto.apollo.common.PathPoint|undefined} value
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
*/
proto.apollo.common.TrajectoryPoint.prototype.setPathPoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.clearPathPoint = function() {
  return this.setPathPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.TrajectoryPoint.prototype.hasPathPoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double v = 2;
 * @return {number}
 */
proto.apollo.common.TrajectoryPoint.prototype.getV = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.setV = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.clearV = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.TrajectoryPoint.prototype.hasV = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double a = 3;
 * @return {number}
 */
proto.apollo.common.TrajectoryPoint.prototype.getA = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.setA = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.clearA = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.TrajectoryPoint.prototype.hasA = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double relative_time = 4;
 * @return {number}
 */
proto.apollo.common.TrajectoryPoint.prototype.getRelativeTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.setRelativeTime = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.clearRelativeTime = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.TrajectoryPoint.prototype.hasRelativeTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double da = 5;
 * @return {number}
 */
proto.apollo.common.TrajectoryPoint.prototype.getDa = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.setDa = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.clearDa = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.TrajectoryPoint.prototype.hasDa = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double steer = 6;
 * @return {number}
 */
proto.apollo.common.TrajectoryPoint.prototype.getSteer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.setSteer = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.clearSteer = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.TrajectoryPoint.prototype.hasSteer = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional GaussianInfo gaussian_info = 7;
 * @return {?proto.apollo.common.GaussianInfo}
 */
proto.apollo.common.TrajectoryPoint.prototype.getGaussianInfo = function() {
  return /** @type{?proto.apollo.common.GaussianInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.common.GaussianInfo, 7));
};


/**
 * @param {?proto.apollo.common.GaussianInfo|undefined} value
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
*/
proto.apollo.common.TrajectoryPoint.prototype.setGaussianInfo = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.clearGaussianInfo = function() {
  return this.setGaussianInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.TrajectoryPoint.prototype.hasGaussianInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};


