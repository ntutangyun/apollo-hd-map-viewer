// source: modules/dreamview/proto/hmi_mode.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.apollo.dreamview.MonitoredComponent');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.apollo.dreamview.ChannelMonitorConfig');
goog.require('proto.apollo.dreamview.ModuleMonitorConfig');
goog.require('proto.apollo.dreamview.ProcessMonitorConfig');
goog.require('proto.apollo.dreamview.ResourceMonitorConfig');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.MonitoredComponent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.MonitoredComponent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.MonitoredComponent.displayName = 'proto.apollo.dreamview.MonitoredComponent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.MonitoredComponent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.MonitoredComponent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.MonitoredComponent.toObject = function(includeInstance, msg) {
  var f, obj = {
    process: (f = msg.getProcess()) && proto.apollo.dreamview.ProcessMonitorConfig.toObject(includeInstance, f),
    channel: (f = msg.getChannel()) && proto.apollo.dreamview.ChannelMonitorConfig.toObject(includeInstance, f),
    resource: (f = msg.getResource()) && proto.apollo.dreamview.ResourceMonitorConfig.toObject(includeInstance, f),
    requiredForSafety: jspb.Message.getBooleanFieldWithDefault(msg, 4, true),
    module: (f = msg.getModule()) && proto.apollo.dreamview.ModuleMonitorConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MonitoredComponent as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.MonitoredComponent.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.process;

  /** @type {?|undefined} */
  this.channel;

  /** @type {?|undefined} */
  this.resource;

  /** @type {?|undefined} */
  this.requiredForSafety;

  /** @type {?|undefined} */
  this.module;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.MonitoredComponent.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.MonitoredComponent}
 */
proto.apollo.dreamview.MonitoredComponent.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.MonitoredComponent();
  obj.process && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.dreamview.ProcessMonitorConfig.fromObject(obj.process));
  obj.channel && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.dreamview.ChannelMonitorConfig.fromObject(obj.channel));
  obj.resource && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.dreamview.ResourceMonitorConfig.fromObject(obj.resource));
  obj.requiredForSafety != null && jspb.Message.setField(msg, 4, obj.requiredForSafety);
  obj.module && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.dreamview.ModuleMonitorConfig.fromObject(obj.module));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.MonitoredComponent}
 */
proto.apollo.dreamview.MonitoredComponent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.MonitoredComponent;
  return proto.apollo.dreamview.MonitoredComponent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.MonitoredComponent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.MonitoredComponent}
 */
proto.apollo.dreamview.MonitoredComponent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.dreamview.ProcessMonitorConfig;
      reader.readMessage(value,proto.apollo.dreamview.ProcessMonitorConfig.deserializeBinaryFromReader);
      msg.setProcess(value);
      break;
    case 2:
      var value = new proto.apollo.dreamview.ChannelMonitorConfig;
      reader.readMessage(value,proto.apollo.dreamview.ChannelMonitorConfig.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    case 3:
      var value = new proto.apollo.dreamview.ResourceMonitorConfig;
      reader.readMessage(value,proto.apollo.dreamview.ResourceMonitorConfig.deserializeBinaryFromReader);
      msg.setResource(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequiredForSafety(value);
      break;
    case 5:
      var value = new proto.apollo.dreamview.ModuleMonitorConfig;
      reader.readMessage(value,proto.apollo.dreamview.ModuleMonitorConfig.deserializeBinaryFromReader);
      msg.setModule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.MonitoredComponent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.MonitoredComponent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.MonitoredComponent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.dreamview.ProcessMonitorConfig.serializeBinaryToWriter
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.dreamview.ChannelMonitorConfig.serializeBinaryToWriter
    );
  }
  f = message.getResource();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.dreamview.ResourceMonitorConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getModule();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.dreamview.ModuleMonitorConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProcessMonitorConfig process = 1;
 * @return {?proto.apollo.dreamview.ProcessMonitorConfig}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.getProcess = function() {
  return /** @type{?proto.apollo.dreamview.ProcessMonitorConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.ProcessMonitorConfig, 1));
};


/**
 * @param {?proto.apollo.dreamview.ProcessMonitorConfig|undefined} value
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
*/
proto.apollo.dreamview.MonitoredComponent.prototype.setProcess = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
 */
proto.apollo.dreamview.MonitoredComponent.prototype.clearProcess = function() {
  return this.setProcess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.hasProcess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChannelMonitorConfig channel = 2;
 * @return {?proto.apollo.dreamview.ChannelMonitorConfig}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.getChannel = function() {
  return /** @type{?proto.apollo.dreamview.ChannelMonitorConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.ChannelMonitorConfig, 2));
};


/**
 * @param {?proto.apollo.dreamview.ChannelMonitorConfig|undefined} value
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
*/
proto.apollo.dreamview.MonitoredComponent.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
 */
proto.apollo.dreamview.MonitoredComponent.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ResourceMonitorConfig resource = 3;
 * @return {?proto.apollo.dreamview.ResourceMonitorConfig}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.getResource = function() {
  return /** @type{?proto.apollo.dreamview.ResourceMonitorConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.ResourceMonitorConfig, 3));
};


/**
 * @param {?proto.apollo.dreamview.ResourceMonitorConfig|undefined} value
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
*/
proto.apollo.dreamview.MonitoredComponent.prototype.setResource = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
 */
proto.apollo.dreamview.MonitoredComponent.prototype.clearResource = function() {
  return this.setResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.hasResource = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool required_for_safety = 4;
 * @return {boolean}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.getRequiredForSafety = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
 */
proto.apollo.dreamview.MonitoredComponent.prototype.setRequiredForSafety = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
 */
proto.apollo.dreamview.MonitoredComponent.prototype.clearRequiredForSafety = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.hasRequiredForSafety = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ModuleMonitorConfig module = 5;
 * @return {?proto.apollo.dreamview.ModuleMonitorConfig}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.getModule = function() {
  return /** @type{?proto.apollo.dreamview.ModuleMonitorConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.ModuleMonitorConfig, 5));
};


/**
 * @param {?proto.apollo.dreamview.ModuleMonitorConfig|undefined} value
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
*/
proto.apollo.dreamview.MonitoredComponent.prototype.setModule = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
 */
proto.apollo.dreamview.MonitoredComponent.prototype.clearModule = function() {
  return this.setModule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.hasModule = function() {
  return jspb.Message.getField(this, 5) != null;
};


