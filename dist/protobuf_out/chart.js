// source: modules/dreamview/proto/chart.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.apollo.dreamview.Chart');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.apollo.dreamview.Car');
goog.require('proto.apollo.dreamview.Line');
goog.require('proto.apollo.dreamview.Options');
goog.require('proto.apollo.dreamview.Polygon');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.Chart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.Chart.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.Chart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.Chart.displayName = 'proto.apollo.dreamview.Chart';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.Chart.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.Chart.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.Chart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.Chart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Chart.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    options: (f = msg.getOptions()) && proto.apollo.dreamview.Options.toObject(includeInstance, f),
    lineList: jspb.Message.toObjectList(msg.getLineList(),
    proto.apollo.dreamview.Line.toObject, includeInstance),
    polygonList: jspb.Message.toObjectList(msg.getPolygonList(),
    proto.apollo.dreamview.Polygon.toObject, includeInstance),
    carList: jspb.Message.toObjectList(msg.getCarList(),
    proto.apollo.dreamview.Car.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Chart as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.Chart.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.title;

  /** @type {?|undefined} */
  this.options;

  /** @type {?|undefined} */
  this.lineList;

  /** @type {?|undefined} */
  this.polygonList;

  /** @type {?|undefined} */
  this.carList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.Chart.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.Chart}
 */
proto.apollo.dreamview.Chart.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.Chart();
  obj.title != null && jspb.Message.setField(msg, 1, obj.title);
  obj.options && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.dreamview.Options.fromObject(obj.options));
  obj.lineList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.lineList.map(
          proto.apollo.dreamview.Line.fromObject));
  obj.polygonList && jspb.Message.setRepeatedWrapperField(
      msg, 4, obj.polygonList.map(
          proto.apollo.dreamview.Polygon.fromObject));
  obj.carList && jspb.Message.setRepeatedWrapperField(
      msg, 5, obj.carList.map(
          proto.apollo.dreamview.Car.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.Chart}
 */
proto.apollo.dreamview.Chart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.Chart;
  return proto.apollo.dreamview.Chart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.Chart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.Chart}
 */
proto.apollo.dreamview.Chart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = new proto.apollo.dreamview.Options;
      reader.readMessage(value,proto.apollo.dreamview.Options.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    case 3:
      var value = new proto.apollo.dreamview.Line;
      reader.readMessage(value,proto.apollo.dreamview.Line.deserializeBinaryFromReader);
      msg.addLine(value);
      break;
    case 4:
      var value = new proto.apollo.dreamview.Polygon;
      reader.readMessage(value,proto.apollo.dreamview.Polygon.deserializeBinaryFromReader);
      msg.addPolygon(value);
      break;
    case 5:
      var value = new proto.apollo.dreamview.Car;
      reader.readMessage(value,proto.apollo.dreamview.Car.deserializeBinaryFromReader);
      msg.addCar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.Chart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.Chart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.Chart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Chart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.dreamview.Options.serializeBinaryToWriter
    );
  }
  f = message.getLineList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.dreamview.Line.serializeBinaryToWriter
    );
  }
  f = message.getPolygonList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.apollo.dreamview.Polygon.serializeBinaryToWriter
    );
  }
  f = message.getCarList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.apollo.dreamview.Car.serializeBinaryToWriter
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.apollo.dreamview.Chart.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.Chart} returns this
 */
proto.apollo.dreamview.Chart.prototype.setTitle = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Chart} returns this
 */
proto.apollo.dreamview.Chart.prototype.clearTitle = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Chart.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Options options = 2;
 * @return {?proto.apollo.dreamview.Options}
 */
proto.apollo.dreamview.Chart.prototype.getOptions = function() {
  return /** @type{?proto.apollo.dreamview.Options} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.Options, 2));
};


/**
 * @param {?proto.apollo.dreamview.Options|undefined} value
 * @return {!proto.apollo.dreamview.Chart} returns this
*/
proto.apollo.dreamview.Chart.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.Chart} returns this
 */
proto.apollo.dreamview.Chart.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Chart.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Line line = 3;
 * @return {!Array<!proto.apollo.dreamview.Line>}
 */
proto.apollo.dreamview.Chart.prototype.getLineList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.Line>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.Line, 3));
};


/**
 * @param {!Array<!proto.apollo.dreamview.Line>} value
 * @return {!proto.apollo.dreamview.Chart} returns this
*/
proto.apollo.dreamview.Chart.prototype.setLineList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.dreamview.Line=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.Line}
 */
proto.apollo.dreamview.Chart.prototype.addLine = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.dreamview.Line, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Chart} returns this
 */
proto.apollo.dreamview.Chart.prototype.clearLineList = function() {
  return this.setLineList([]);
};


/**
 * repeated Polygon polygon = 4;
 * @return {!Array<!proto.apollo.dreamview.Polygon>}
 */
proto.apollo.dreamview.Chart.prototype.getPolygonList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.Polygon>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.Polygon, 4));
};


/**
 * @param {!Array<!proto.apollo.dreamview.Polygon>} value
 * @return {!proto.apollo.dreamview.Chart} returns this
*/
proto.apollo.dreamview.Chart.prototype.setPolygonList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.apollo.dreamview.Polygon=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.Polygon}
 */
proto.apollo.dreamview.Chart.prototype.addPolygon = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.apollo.dreamview.Polygon, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Chart} returns this
 */
proto.apollo.dreamview.Chart.prototype.clearPolygonList = function() {
  return this.setPolygonList([]);
};


/**
 * repeated Car car = 5;
 * @return {!Array<!proto.apollo.dreamview.Car>}
 */
proto.apollo.dreamview.Chart.prototype.getCarList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.Car>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.Car, 5));
};


/**
 * @param {!Array<!proto.apollo.dreamview.Car>} value
 * @return {!proto.apollo.dreamview.Chart} returns this
*/
proto.apollo.dreamview.Chart.prototype.setCarList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.apollo.dreamview.Car=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.Car}
 */
proto.apollo.dreamview.Chart.prototype.addCar = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.apollo.dreamview.Car, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Chart} returns this
 */
proto.apollo.dreamview.Chart.prototype.clearCarList = function() {
  return this.setCarList([]);
};


