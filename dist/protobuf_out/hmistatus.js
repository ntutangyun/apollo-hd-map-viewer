// source: modules/dreamview/proto/hmi_status.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.apollo.dreamview.HMIStatus');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.apollo.common.Header');
goog.require('proto.apollo.monitor.ComponentStatus');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.HMIStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.HMIStatus.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.HMIStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.HMIStatus.displayName = 'proto.apollo.dreamview.HMIStatus';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.HMIStatus.repeatedFields_ = [2,4,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.HMIStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.HMIStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.HMIStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.HMIStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.apollo.common.Header.toObject(includeInstance, f),
    modesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    currentMode: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    mapsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    currentMap: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    vehiclesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    currentVehicle: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    modulesMap: (f = msg.getModulesMap()) ? f.toObject(includeInstance, undefined) : [],
    monitoredComponentsMap: (f = msg.getMonitoredComponentsMap()) ? f.toObject(includeInstance, proto.apollo.monitor.ComponentStatus.toObject) : [],
    dockerImage: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    utmZoneId: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    passengerMsg: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    otherComponentsMap: (f = msg.getOtherComponentsMap()) ? f.toObject(includeInstance, proto.apollo.monitor.ComponentStatus.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of HMIStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.HMIStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.modesList;

  /** @type {?|undefined} */
  this.currentMode;

  /** @type {?|undefined} */
  this.mapsList;

  /** @type {?|undefined} */
  this.currentMap;

  /** @type {?|undefined} */
  this.vehiclesList;

  /** @type {?|undefined} */
  this.currentVehicle;

  /** @type {?|undefined} */
  this.modulesMap;

  /** @type {?|undefined} */
  this.monitoredComponentsMap;

  /** @type {?|undefined} */
  this.dockerImage;

  /** @type {?|undefined} */
  this.utmZoneId;

  /** @type {?|undefined} */
  this.passengerMsg;

  /** @type {?|undefined} */
  this.otherComponentsMap;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.HMIStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.HMIStatus}
 */
proto.apollo.dreamview.HMIStatus.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.HMIStatus();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.common.Header.fromObject(obj.header));
  obj.modesList != null && jspb.Message.setField(msg, 2, obj.modesList);
  obj.currentMode != null && jspb.Message.setField(msg, 3, obj.currentMode);
  obj.mapsList != null && jspb.Message.setField(msg, 4, obj.mapsList);
  obj.currentMap != null && jspb.Message.setField(msg, 5, obj.currentMap);
  obj.vehiclesList != null && jspb.Message.setField(msg, 6, obj.vehiclesList);
  obj.currentVehicle != null && jspb.Message.setField(msg, 7, obj.currentVehicle);
  obj.modulesMap && jspb.Message.setField(msg, 8, obj.modulesMap);
  obj.monitoredComponentsMap && jspb.Message.setWrapperField(
      msg, 9, jspb.Map.fromObject(obj.monitoredComponentsMap, proto.apollo.monitor.ComponentStatus, proto.apollo.monitor.ComponentStatus.fromObject));
  obj.dockerImage != null && jspb.Message.setField(msg, 10, obj.dockerImage);
  obj.utmZoneId != null && jspb.Message.setField(msg, 11, obj.utmZoneId);
  obj.passengerMsg != null && jspb.Message.setField(msg, 12, obj.passengerMsg);
  obj.otherComponentsMap && jspb.Message.setWrapperField(
      msg, 13, jspb.Map.fromObject(obj.otherComponentsMap, proto.apollo.monitor.ComponentStatus, proto.apollo.monitor.ComponentStatus.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.HMIStatus}
 */
proto.apollo.dreamview.HMIStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.HMIStatus;
  return proto.apollo.dreamview.HMIStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.HMIStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.HMIStatus}
 */
proto.apollo.dreamview.HMIStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.common.Header;
      reader.readMessage(value,proto.apollo.common.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addModes(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentMode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addMaps(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentMap(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addVehicles(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentVehicle(value);
      break;
    case 8:
      var value = msg.getModulesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool, null, "", false);
         });
      break;
    case 9:
      var value = msg.getMonitoredComponentsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.apollo.monitor.ComponentStatus.deserializeBinaryFromReader, "", new proto.apollo.monitor.ComponentStatus());
         });
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDockerImage(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUtmZoneId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassengerMsg(value);
      break;
    case 13:
      var value = msg.getOtherComponentsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.apollo.monitor.ComponentStatus.deserializeBinaryFromReader, "", new proto.apollo.monitor.ComponentStatus());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.HMIStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.HMIStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.HMIStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.HMIStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.common.Header.serializeBinaryToWriter
    );
  }
  f = message.getModesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMapsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getVehiclesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getModulesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getMonitoredComponentsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.apollo.monitor.ComponentStatus.serializeBinaryToWriter);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getOtherComponentsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(13, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.apollo.monitor.ComponentStatus.serializeBinaryToWriter);
  }
};


/**
 * optional apollo.common.Header header = 1;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.dreamview.HMIStatus.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, proto.apollo.common.Header, 1));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
*/
proto.apollo.dreamview.HMIStatus.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.HMIStatus.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string modes = 2;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.HMIStatus.prototype.getModesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.setModesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.addModes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.clearModesList = function() {
  return this.setModesList([]);
};


/**
 * optional string current_mode = 3;
 * @return {string}
 */
proto.apollo.dreamview.HMIStatus.prototype.getCurrentMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.setCurrentMode = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.clearCurrentMode = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.HMIStatus.prototype.hasCurrentMode = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string maps = 4;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.HMIStatus.prototype.getMapsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.setMapsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.addMaps = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.clearMapsList = function() {
  return this.setMapsList([]);
};


/**
 * optional string current_map = 5;
 * @return {string}
 */
proto.apollo.dreamview.HMIStatus.prototype.getCurrentMap = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.setCurrentMap = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.clearCurrentMap = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.HMIStatus.prototype.hasCurrentMap = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated string vehicles = 6;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.HMIStatus.prototype.getVehiclesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.setVehiclesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.addVehicles = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.clearVehiclesList = function() {
  return this.setVehiclesList([]);
};


/**
 * optional string current_vehicle = 7;
 * @return {string}
 */
proto.apollo.dreamview.HMIStatus.prototype.getCurrentVehicle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.setCurrentVehicle = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.clearCurrentVehicle = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.HMIStatus.prototype.hasCurrentVehicle = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * map<string, bool> modules = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.apollo.dreamview.HMIStatus.prototype.getModulesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.clearModulesMap = function() {
  this.getModulesMap().clear();
  return this;};


/**
 * map<string, apollo.monitor.ComponentStatus> monitored_components = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.apollo.monitor.ComponentStatus>}
 */
proto.apollo.dreamview.HMIStatus.prototype.getMonitoredComponentsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.apollo.monitor.ComponentStatus>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      proto.apollo.monitor.ComponentStatus));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.clearMonitoredComponentsMap = function() {
  this.getMonitoredComponentsMap().clear();
  return this;};


/**
 * optional string docker_image = 10;
 * @return {string}
 */
proto.apollo.dreamview.HMIStatus.prototype.getDockerImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.setDockerImage = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.clearDockerImage = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.HMIStatus.prototype.hasDockerImage = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 utm_zone_id = 11;
 * @return {number}
 */
proto.apollo.dreamview.HMIStatus.prototype.getUtmZoneId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.setUtmZoneId = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.clearUtmZoneId = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.HMIStatus.prototype.hasUtmZoneId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string passenger_msg = 12;
 * @return {string}
 */
proto.apollo.dreamview.HMIStatus.prototype.getPassengerMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.setPassengerMsg = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.clearPassengerMsg = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.HMIStatus.prototype.hasPassengerMsg = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * map<string, apollo.monitor.ComponentStatus> other_components = 13;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.apollo.monitor.ComponentStatus>}
 */
proto.apollo.dreamview.HMIStatus.prototype.getOtherComponentsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.apollo.monitor.ComponentStatus>} */ (
      jspb.Message.getMapField(this, 13, opt_noLazyCreate,
      proto.apollo.monitor.ComponentStatus));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.apollo.dreamview.HMIStatus} returns this
 */
proto.apollo.dreamview.HMIStatus.prototype.clearOtherComponentsMap = function() {
  this.getOtherComponentsMap().clear();
  return this;};


