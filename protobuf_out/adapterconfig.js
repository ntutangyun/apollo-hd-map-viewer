// source: modules/common/adapters/proto/adapter_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.apollo.common.adapter.AdapterConfig');
goog.provide('proto.apollo.common.adapter.AdapterConfig.MessageType');
goog.provide('proto.apollo.common.adapter.AdapterConfig.Mode');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.adapter.AdapterConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.common.adapter.AdapterConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.adapter.AdapterConfig.displayName = 'proto.apollo.common.adapter.AdapterConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.adapter.AdapterConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.adapter.AdapterConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.adapter.AdapterConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.adapter.AdapterConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    mode: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    messageHistoryLimit: jspb.Message.getFieldWithDefault(msg, 3, 10),
    latch: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    topic: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of AdapterConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.common.adapter.AdapterConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.mode;

  /** @type {?|undefined} */
  this.messageHistoryLimit;

  /** @type {?|undefined} */
  this.latch;

  /** @type {?|undefined} */
  this.topic;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.common.adapter.AdapterConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.common.adapter.AdapterConfig}
 */
proto.apollo.common.adapter.AdapterConfig.fromObject = function(obj) {
  var msg = new proto.apollo.common.adapter.AdapterConfig();
  obj.type != null && jspb.Message.setField(msg, 1, obj.type);
  obj.mode != null && jspb.Message.setField(msg, 2, obj.mode);
  obj.messageHistoryLimit != null && jspb.Message.setField(msg, 3, obj.messageHistoryLimit);
  obj.latch != null && jspb.Message.setField(msg, 4, obj.latch);
  obj.topic != null && jspb.Message.setField(msg, 5, obj.topic);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.adapter.AdapterConfig}
 */
proto.apollo.common.adapter.AdapterConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.adapter.AdapterConfig;
  return proto.apollo.common.adapter.AdapterConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.adapter.AdapterConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.adapter.AdapterConfig}
 */
proto.apollo.common.adapter.AdapterConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.common.adapter.AdapterConfig.MessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.common.adapter.AdapterConfig.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMessageHistoryLimit(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLatch(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.adapter.AdapterConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.adapter.AdapterConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.adapter.AdapterConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.adapter.AdapterConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.common.adapter.AdapterConfig.MessageType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.apollo.common.adapter.AdapterConfig.Mode} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.common.adapter.AdapterConfig.MessageType = {
  POINT_CLOUD: 1,
  VLP16_POINT_CLOUD: 58,
  GPS: 2,
  IMU: 3,
  CHASSIS: 4,
  LOCALIZATION: 5,
  PLANNING_TRAJECTORY: 6,
  MONITOR: 7,
  PAD: 8,
  CONTROL_COMMAND: 9,
  PREDICTION: 10,
  PERCEPTION_OBSTACLES: 11,
  TRAFFIC_LIGHT_DETECTION: 12,
  CHASSIS_DETAIL: 13,
  DECISION: 14,
  CANBUS: 15,
  ROUTING_REQUEST: 16,
  ROUTING_RESPONSE: 17,
  RELATIVE_ODOMETRY: 18,
  INS_STAT: 19,
  HMI_COMMAND: 20,
  MOBILEYE: 21,
  DELPHIESR: 22,
  COMPRESSED_IMAGE: 23,
  SYSTEM_STATUS: 24,
  INS_STATUS: 25,
  GNSS_STATUS: 26,
  CONTI_RADAR: 27,
  IMAGE_SHORT: 28,
  IMAGE_LONG: 29,
  DRIVE_EVENT: 30,
  GNSS_RTK_OBS: 31,
  GNSS_RTK_EPH: 32,
  GNSS_BEST_POSE: 33,
  LOCALIZATION_MSF_GNSS: 34,
  LOCALIZATION_MSF_LIDAR: 35,
  LOCALIZATION_MSF_SINS_PVA: 36,
  RAW_IMU: 37,
  LOCALIZATION_MSF_STATUS: 38,
  STATIC_INFO: 39,
  RELATIVE_MAP: 40,
  NAVIGATION: 41,
  ULTRASONIC_RADAR: 42,
  AUDIO_CAPTURE: 43,
  IMAGE_FRONT: 45,
  PANDORA_POINT_CLOUD: 46,
  PANDORA_CAMERA_FRONT_COLOR: 47,
  PANDORA_CAMERA_RIGHT_GRAY: 48,
  PANDORA_CAMERA_LEFT_GRAY: 49,
  PANDORA_CAMERA_FRONT_GRAY: 50,
  PANDORA_CAMERA_BACK_GRAY: 51,
  PERCEPTION_LANE_MASK: 52,
  GUARDIAN: 53,
  GNSS_RAW_DATA: 54,
  STREAM_STATUS: 55,
  GNSS_HEADING: 56,
  RTCM_DATA: 57,
  RACOBIT_RADAR: 59,
  POINT_CLOUD_DENSE: 60,
  POINT_CLOUD_DENSE_RAW: 61,
  VELODYNE_SCAN_DENSE: 62,
  POINT_CLOUD_SPARSE_1: 63,
  POINT_CLOUD_SPARSE_RAW_1: 64,
  VELODYNE_SCAN_SPARSE_1: 65,
  POINT_CLOUD_SPARSE_2: 66,
  POINT_CLOUD_SPARSE_RAW_2: 67,
  VELODYNE_SCAN_SPARSE_2: 68,
  POINT_CLOUD_SPARSE_3: 69,
  POINT_CLOUD_SPARSE_RAW_3: 70,
  VELODYNE_SCAN_SPARSE_3: 71,
  CAMERA_IMAGE_LONG: 72,
  CAMERA_IMAGE_SHORT: 73,
  PLANNING_PAD: 74,
  STORYTELLING: 75
};

/**
 * @enum {number}
 */
proto.apollo.common.adapter.AdapterConfig.Mode = {
  RECEIVE_ONLY: 0,
  PUBLISH_ONLY: 1,
  DUPLEX: 2
};

/**
 * optional MessageType type = 1;
 * @return {!proto.apollo.common.adapter.AdapterConfig.MessageType}
 */
proto.apollo.common.adapter.AdapterConfig.prototype.getType = function() {
  return /** @type {!proto.apollo.common.adapter.AdapterConfig.MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.common.adapter.AdapterConfig.MessageType} value
 * @return {!proto.apollo.common.adapter.AdapterConfig} returns this
 */
proto.apollo.common.adapter.AdapterConfig.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.adapter.AdapterConfig} returns this
 */
proto.apollo.common.adapter.AdapterConfig.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.adapter.AdapterConfig.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Mode mode = 2;
 * @return {!proto.apollo.common.adapter.AdapterConfig.Mode}
 */
proto.apollo.common.adapter.AdapterConfig.prototype.getMode = function() {
  return /** @type {!proto.apollo.common.adapter.AdapterConfig.Mode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.apollo.common.adapter.AdapterConfig.Mode} value
 * @return {!proto.apollo.common.adapter.AdapterConfig} returns this
 */
proto.apollo.common.adapter.AdapterConfig.prototype.setMode = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.adapter.AdapterConfig} returns this
 */
proto.apollo.common.adapter.AdapterConfig.prototype.clearMode = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.adapter.AdapterConfig.prototype.hasMode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 message_history_limit = 3;
 * @return {number}
 */
proto.apollo.common.adapter.AdapterConfig.prototype.getMessageHistoryLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 10));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.adapter.AdapterConfig} returns this
 */
proto.apollo.common.adapter.AdapterConfig.prototype.setMessageHistoryLimit = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.adapter.AdapterConfig} returns this
 */
proto.apollo.common.adapter.AdapterConfig.prototype.clearMessageHistoryLimit = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.adapter.AdapterConfig.prototype.hasMessageHistoryLimit = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool latch = 4;
 * @return {boolean}
 */
proto.apollo.common.adapter.AdapterConfig.prototype.getLatch = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.common.adapter.AdapterConfig} returns this
 */
proto.apollo.common.adapter.AdapterConfig.prototype.setLatch = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.adapter.AdapterConfig} returns this
 */
proto.apollo.common.adapter.AdapterConfig.prototype.clearLatch = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.adapter.AdapterConfig.prototype.hasLatch = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string topic = 5;
 * @return {string}
 */
proto.apollo.common.adapter.AdapterConfig.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.common.adapter.AdapterConfig} returns this
 */
proto.apollo.common.adapter.AdapterConfig.prototype.setTopic = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.adapter.AdapterConfig} returns this
 */
proto.apollo.common.adapter.AdapterConfig.prototype.clearTopic = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.adapter.AdapterConfig.prototype.hasTopic = function() {
  return jspb.Message.getField(this, 5) != null;
};


