// source: modules/common/configs/proto/vehicle_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.apollo.common.VehicleParam');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.apollo.common.LatencyParam');
goog.require('proto.apollo.common.VehicleID');

goog.forwardDeclare('proto.apollo.common.VehicleBrand');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.VehicleParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.common.VehicleParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.VehicleParam.displayName = 'proto.apollo.common.VehicleParam';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.VehicleParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.VehicleParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.VehicleParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.VehicleParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    brand: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    vehicleId: (f = msg.getVehicleId()) && proto.apollo.common.VehicleID.toObject(includeInstance, f),
    frontEdgeToCenter: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, NaN),
    backEdgeToCenter: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, NaN),
    leftEdgeToCenter: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, NaN),
    rightEdgeToCenter: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, NaN),
    length: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, NaN),
    width: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, NaN),
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, NaN),
    minTurnRadius: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, NaN),
    maxAcceleration: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, NaN),
    maxDeceleration: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, NaN),
    maxSteerAngle: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, NaN),
    maxSteerAngleRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, NaN),
    minSteerAngleRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, NaN),
    steerRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, NaN),
    wheelBase: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, NaN),
    wheelRollingRadius: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, NaN),
    maxAbsSpeedWhenStopped: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, NaN),
    brakeDeadzone: jspb.Message.getFloatingPointFieldWithDefault(msg, 20, NaN),
    throttleDeadzone: jspb.Message.getFloatingPointFieldWithDefault(msg, 21, NaN),
    steeringLatencyParam: (f = msg.getSteeringLatencyParam()) && proto.apollo.common.LatencyParam.toObject(includeInstance, f),
    throttleLatencyParam: (f = msg.getThrottleLatencyParam()) && proto.apollo.common.LatencyParam.toObject(includeInstance, f),
    brakeLatencyParam: (f = msg.getBrakeLatencyParam()) && proto.apollo.common.LatencyParam.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.VehicleParam}
 */
proto.apollo.common.VehicleParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.VehicleParam;
  return proto.apollo.common.VehicleParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.VehicleParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.VehicleParam}
 */
proto.apollo.common.VehicleParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.common.VehicleBrand} */ (reader.readEnum());
      msg.setBrand(value);
      break;
    case 2:
      var value = new proto.apollo.common.VehicleID;
      reader.readMessage(value,proto.apollo.common.VehicleID.deserializeBinaryFromReader);
      msg.setVehicleId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFrontEdgeToCenter(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBackEdgeToCenter(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLeftEdgeToCenter(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRightEdgeToCenter(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLength(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidth(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinTurnRadius(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxAcceleration(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxDeceleration(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxSteerAngle(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxSteerAngleRate(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinSteerAngleRate(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerRatio(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWheelBase(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWheelRollingRadius(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxAbsSpeedWhenStopped(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBrakeDeadzone(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThrottleDeadzone(value);
      break;
    case 22:
      var value = new proto.apollo.common.LatencyParam;
      reader.readMessage(value,proto.apollo.common.LatencyParam.deserializeBinaryFromReader);
      msg.setSteeringLatencyParam(value);
      break;
    case 23:
      var value = new proto.apollo.common.LatencyParam;
      reader.readMessage(value,proto.apollo.common.LatencyParam.deserializeBinaryFromReader);
      msg.setThrottleLatencyParam(value);
      break;
    case 24:
      var value = new proto.apollo.common.LatencyParam;
      reader.readMessage(value,proto.apollo.common.LatencyParam.deserializeBinaryFromReader);
      msg.setBrakeLatencyParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.VehicleParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.VehicleParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.VehicleParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.VehicleParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.common.VehicleBrand} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getVehicleId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.common.VehicleID.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeFloat(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = message.getSteeringLatencyParam();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.apollo.common.LatencyParam.serializeBinaryToWriter
    );
  }
  f = message.getThrottleLatencyParam();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.apollo.common.LatencyParam.serializeBinaryToWriter
    );
  }
  f = message.getBrakeLatencyParam();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.apollo.common.LatencyParam.serializeBinaryToWriter
    );
  }
};


/**
 * optional VehicleBrand brand = 1;
 * @return {!proto.apollo.common.VehicleBrand}
 */
proto.apollo.common.VehicleParam.prototype.getBrand = function() {
  return /** @type {!proto.apollo.common.VehicleBrand} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.common.VehicleBrand} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setBrand = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearBrand = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasBrand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VehicleID vehicle_id = 2;
 * @return {?proto.apollo.common.VehicleID}
 */
proto.apollo.common.VehicleParam.prototype.getVehicleId = function() {
  return /** @type{?proto.apollo.common.VehicleID} */ (
    jspb.Message.getWrapperField(this, proto.apollo.common.VehicleID, 2));
};


/**
 * @param {?proto.apollo.common.VehicleID|undefined} value
 * @return {!proto.apollo.common.VehicleParam} returns this
*/
proto.apollo.common.VehicleParam.prototype.setVehicleId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearVehicleId = function() {
  return this.setVehicleId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasVehicleId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double front_edge_to_center = 3;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getFrontEdgeToCenter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setFrontEdgeToCenter = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearFrontEdgeToCenter = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasFrontEdgeToCenter = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double back_edge_to_center = 4;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getBackEdgeToCenter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setBackEdgeToCenter = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearBackEdgeToCenter = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasBackEdgeToCenter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double left_edge_to_center = 5;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getLeftEdgeToCenter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setLeftEdgeToCenter = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearLeftEdgeToCenter = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasLeftEdgeToCenter = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double right_edge_to_center = 6;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getRightEdgeToCenter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setRightEdgeToCenter = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearRightEdgeToCenter = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasRightEdgeToCenter = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double length = 7;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setLength = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearLength = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasLength = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double width = 8;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double height = 9;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double min_turn_radius = 10;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getMinTurnRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setMinTurnRadius = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearMinTurnRadius = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasMinTurnRadius = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double max_acceleration = 11;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getMaxAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setMaxAcceleration = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearMaxAcceleration = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasMaxAcceleration = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double max_deceleration = 12;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getMaxDeceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setMaxDeceleration = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearMaxDeceleration = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasMaxDeceleration = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double max_steer_angle = 13;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getMaxSteerAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setMaxSteerAngle = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearMaxSteerAngle = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasMaxSteerAngle = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double max_steer_angle_rate = 14;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getMaxSteerAngleRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setMaxSteerAngleRate = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearMaxSteerAngleRate = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasMaxSteerAngleRate = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional double min_steer_angle_rate = 15;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getMinSteerAngleRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setMinSteerAngleRate = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearMinSteerAngleRate = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasMinSteerAngleRate = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional double steer_ratio = 16;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getSteerRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setSteerRatio = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearSteerRatio = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasSteerRatio = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional double wheel_base = 17;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getWheelBase = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setWheelBase = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearWheelBase = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasWheelBase = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional double wheel_rolling_radius = 18;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getWheelRollingRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setWheelRollingRadius = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearWheelRollingRadius = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasWheelRollingRadius = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional float max_abs_speed_when_stopped = 19;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getMaxAbsSpeedWhenStopped = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setMaxAbsSpeedWhenStopped = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearMaxAbsSpeedWhenStopped = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasMaxAbsSpeedWhenStopped = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional double brake_deadzone = 20;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getBrakeDeadzone = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setBrakeDeadzone = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearBrakeDeadzone = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasBrakeDeadzone = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional double throttle_deadzone = 21;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getThrottleDeadzone = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setThrottleDeadzone = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearThrottleDeadzone = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasThrottleDeadzone = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional LatencyParam steering_latency_param = 22;
 * @return {?proto.apollo.common.LatencyParam}
 */
proto.apollo.common.VehicleParam.prototype.getSteeringLatencyParam = function() {
  return /** @type{?proto.apollo.common.LatencyParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.common.LatencyParam, 22));
};


/**
 * @param {?proto.apollo.common.LatencyParam|undefined} value
 * @return {!proto.apollo.common.VehicleParam} returns this
*/
proto.apollo.common.VehicleParam.prototype.setSteeringLatencyParam = function(value) {
  return jspb.Message.setWrapperField(this, 22, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearSteeringLatencyParam = function() {
  return this.setSteeringLatencyParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasSteeringLatencyParam = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional LatencyParam throttle_latency_param = 23;
 * @return {?proto.apollo.common.LatencyParam}
 */
proto.apollo.common.VehicleParam.prototype.getThrottleLatencyParam = function() {
  return /** @type{?proto.apollo.common.LatencyParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.common.LatencyParam, 23));
};


/**
 * @param {?proto.apollo.common.LatencyParam|undefined} value
 * @return {!proto.apollo.common.VehicleParam} returns this
*/
proto.apollo.common.VehicleParam.prototype.setThrottleLatencyParam = function(value) {
  return jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearThrottleLatencyParam = function() {
  return this.setThrottleLatencyParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasThrottleLatencyParam = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional LatencyParam brake_latency_param = 24;
 * @return {?proto.apollo.common.LatencyParam}
 */
proto.apollo.common.VehicleParam.prototype.getBrakeLatencyParam = function() {
  return /** @type{?proto.apollo.common.LatencyParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.common.LatencyParam, 24));
};


/**
 * @param {?proto.apollo.common.LatencyParam|undefined} value
 * @return {!proto.apollo.common.VehicleParam} returns this
*/
proto.apollo.common.VehicleParam.prototype.setBrakeLatencyParam = function(value) {
  return jspb.Message.setWrapperField(this, 24, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearBrakeLatencyParam = function() {
  return this.setBrakeLatencyParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasBrakeLatencyParam = function() {
  return jspb.Message.getField(this, 24) != null;
};


