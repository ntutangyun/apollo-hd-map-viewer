// source: modules/dreamview/proto/simulation_world.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.apollo.dreamview.Object');
goog.provide('proto.apollo.dreamview.Object.DisengageType');
goog.provide('proto.apollo.dreamview.Object.Type');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.apollo.dreamview.Decision');
goog.require('proto.apollo.dreamview.PolygonPoint');
goog.require('proto.apollo.dreamview.Prediction');
goog.require('proto.apollo.perception.V2XInformation');
goog.require('proto.apollo.prediction.ObstacleInteractiveTag');
goog.require('proto.apollo.prediction.ObstaclePriority');

goog.forwardDeclare('proto.apollo.canbus.Chassis.GearPosition');
goog.forwardDeclare('proto.apollo.perception.PerceptionObstacle.Source');
goog.forwardDeclare('proto.apollo.perception.PerceptionObstacle.SubType');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.Object = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.Object.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.Object, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.Object.displayName = 'proto.apollo.dreamview.Object';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.Object.repeatedFields_ = [2,19,22,30];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.Object.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.Object.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.Object} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Object.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    polygonPointList: jspb.Message.toObjectList(msg.getPolygonPointList(),
    proto.apollo.dreamview.PolygonPoint.toObject, includeInstance),
    heading: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    latitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    longitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    positionX: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    positionY: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    length: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 2.8),
    width: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 1.4),
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 1.8),
    speed: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    speedAcceleration: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    speedJerk: (f = jspb.Message.getOptionalFloatingPointField(msg, 13)) == null ? undefined : f,
    spin: (f = jspb.Message.getOptionalFloatingPointField(msg, 14)) == null ? undefined : f,
    spinAcceleration: (f = jspb.Message.getOptionalFloatingPointField(msg, 15)) == null ? undefined : f,
    spinJerk: (f = jspb.Message.getOptionalFloatingPointField(msg, 16)) == null ? undefined : f,
    speedHeading: (f = jspb.Message.getOptionalFloatingPointField(msg, 17)) == null ? undefined : f,
    kappa: (f = jspb.Message.getOptionalFloatingPointField(msg, 18)) == null ? undefined : f,
    dkappa: (f = jspb.Message.getOptionalFloatingPointField(msg, 35)) == null ? undefined : f,
    signalSetList: (f = jspb.Message.getRepeatedField(msg, 19)) == null ? undefined : f,
    currentSignal: (f = jspb.Message.getField(msg, 20)) == null ? undefined : f,
    timestampSec: (f = jspb.Message.getOptionalFloatingPointField(msg, 21)) == null ? undefined : f,
    decisionList: jspb.Message.toObjectList(msg.getDecisionList(),
    proto.apollo.dreamview.Decision.toObject, includeInstance),
    yieldedObstacle: jspb.Message.getBooleanFieldWithDefault(msg, 32, false),
    throttlePercentage: (f = jspb.Message.getOptionalFloatingPointField(msg, 23)) == null ? undefined : f,
    brakePercentage: (f = jspb.Message.getOptionalFloatingPointField(msg, 24)) == null ? undefined : f,
    steeringPercentage: (f = jspb.Message.getOptionalFloatingPointField(msg, 25)) == null ? undefined : f,
    steeringAngle: (f = jspb.Message.getOptionalFloatingPointField(msg, 26)) == null ? undefined : f,
    steeringRatio: (f = jspb.Message.getOptionalFloatingPointField(msg, 27)) == null ? undefined : f,
    batteryPercentage: (f = jspb.Message.getField(msg, 38)) == null ? undefined : f,
    gearLocation: (f = jspb.Message.getField(msg, 39)) == null ? undefined : f,
    disengageType: (f = jspb.Message.getField(msg, 28)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 29)) == null ? undefined : f,
    subType: (f = jspb.Message.getField(msg, 34)) == null ? undefined : f,
    predictionList: jspb.Message.toObjectList(msg.getPredictionList(),
    proto.apollo.dreamview.Prediction.toObject, includeInstance),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 31, 1.0),
    obstaclePriority: (f = msg.getObstaclePriority()) && proto.apollo.prediction.ObstaclePriority.toObject(includeInstance, f),
    interactiveTag: (f = msg.getInteractiveTag()) && proto.apollo.prediction.ObstacleInteractiveTag.toObject(includeInstance, f),
    source: jspb.Message.getFieldWithDefault(msg, 36, 0),
    v2xInfo: (f = msg.getV2xInfo()) && proto.apollo.perception.V2XInformation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Object as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.Object.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.polygonPointList;

  /** @type {?|undefined} */
  this.heading;

  /** @type {?|undefined} */
  this.latitude;

  /** @type {?|undefined} */
  this.longitude;

  /** @type {?|undefined} */
  this.positionX;

  /** @type {?|undefined} */
  this.positionY;

  /** @type {?|undefined} */
  this.length;

  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.height;

  /** @type {?|undefined} */
  this.speed;

  /** @type {?|undefined} */
  this.speedAcceleration;

  /** @type {?|undefined} */
  this.speedJerk;

  /** @type {?|undefined} */
  this.spin;

  /** @type {?|undefined} */
  this.spinAcceleration;

  /** @type {?|undefined} */
  this.spinJerk;

  /** @type {?|undefined} */
  this.speedHeading;

  /** @type {?|undefined} */
  this.kappa;

  /** @type {?|undefined} */
  this.dkappa;

  /** @type {?|undefined} */
  this.signalSetList;

  /** @type {?|undefined} */
  this.currentSignal;

  /** @type {?|undefined} */
  this.timestampSec;

  /** @type {?|undefined} */
  this.decisionList;

  /** @type {?|undefined} */
  this.yieldedObstacle;

  /** @type {?|undefined} */
  this.throttlePercentage;

  /** @type {?|undefined} */
  this.brakePercentage;

  /** @type {?|undefined} */
  this.steeringPercentage;

  /** @type {?|undefined} */
  this.steeringAngle;

  /** @type {?|undefined} */
  this.steeringRatio;

  /** @type {?|undefined} */
  this.batteryPercentage;

  /** @type {?|undefined} */
  this.gearLocation;

  /** @type {?|undefined} */
  this.disengageType;

  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.subType;

  /** @type {?|undefined} */
  this.predictionList;

  /** @type {?|undefined} */
  this.confidence;

  /** @type {?|undefined} */
  this.obstaclePriority;

  /** @type {?|undefined} */
  this.interactiveTag;

  /** @type {?|undefined} */
  this.source;

  /** @type {?|undefined} */
  this.v2xInfo;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.Object.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.Object}
 */
proto.apollo.dreamview.Object.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.Object();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.polygonPointList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.polygonPointList.map(
          proto.apollo.dreamview.PolygonPoint.fromObject));
  obj.heading != null && jspb.Message.setField(msg, 3, obj.heading);
  obj.latitude != null && jspb.Message.setField(msg, 4, obj.latitude);
  obj.longitude != null && jspb.Message.setField(msg, 5, obj.longitude);
  obj.positionX != null && jspb.Message.setField(msg, 6, obj.positionX);
  obj.positionY != null && jspb.Message.setField(msg, 7, obj.positionY);
  obj.length != null && jspb.Message.setField(msg, 8, obj.length);
  obj.width != null && jspb.Message.setField(msg, 9, obj.width);
  obj.height != null && jspb.Message.setField(msg, 10, obj.height);
  obj.speed != null && jspb.Message.setField(msg, 11, obj.speed);
  obj.speedAcceleration != null && jspb.Message.setField(msg, 12, obj.speedAcceleration);
  obj.speedJerk != null && jspb.Message.setField(msg, 13, obj.speedJerk);
  obj.spin != null && jspb.Message.setField(msg, 14, obj.spin);
  obj.spinAcceleration != null && jspb.Message.setField(msg, 15, obj.spinAcceleration);
  obj.spinJerk != null && jspb.Message.setField(msg, 16, obj.spinJerk);
  obj.speedHeading != null && jspb.Message.setField(msg, 17, obj.speedHeading);
  obj.kappa != null && jspb.Message.setField(msg, 18, obj.kappa);
  obj.dkappa != null && jspb.Message.setField(msg, 35, obj.dkappa);
  obj.signalSetList != null && jspb.Message.setField(msg, 19, obj.signalSetList);
  obj.currentSignal != null && jspb.Message.setField(msg, 20, obj.currentSignal);
  obj.timestampSec != null && jspb.Message.setField(msg, 21, obj.timestampSec);
  obj.decisionList && jspb.Message.setRepeatedWrapperField(
      msg, 22, obj.decisionList.map(
          proto.apollo.dreamview.Decision.fromObject));
  obj.yieldedObstacle != null && jspb.Message.setField(msg, 32, obj.yieldedObstacle);
  obj.throttlePercentage != null && jspb.Message.setField(msg, 23, obj.throttlePercentage);
  obj.brakePercentage != null && jspb.Message.setField(msg, 24, obj.brakePercentage);
  obj.steeringPercentage != null && jspb.Message.setField(msg, 25, obj.steeringPercentage);
  obj.steeringAngle != null && jspb.Message.setField(msg, 26, obj.steeringAngle);
  obj.steeringRatio != null && jspb.Message.setField(msg, 27, obj.steeringRatio);
  obj.batteryPercentage != null && jspb.Message.setField(msg, 38, obj.batteryPercentage);
  obj.gearLocation != null && jspb.Message.setField(msg, 39, obj.gearLocation);
  obj.disengageType != null && jspb.Message.setField(msg, 28, obj.disengageType);
  obj.type != null && jspb.Message.setField(msg, 29, obj.type);
  obj.subType != null && jspb.Message.setField(msg, 34, obj.subType);
  obj.predictionList && jspb.Message.setRepeatedWrapperField(
      msg, 30, obj.predictionList.map(
          proto.apollo.dreamview.Prediction.fromObject));
  obj.confidence != null && jspb.Message.setField(msg, 31, obj.confidence);
  obj.obstaclePriority && jspb.Message.setWrapperField(
      msg, 33, proto.apollo.prediction.ObstaclePriority.fromObject(obj.obstaclePriority));
  obj.interactiveTag && jspb.Message.setWrapperField(
      msg, 40, proto.apollo.prediction.ObstacleInteractiveTag.fromObject(obj.interactiveTag));
  obj.source != null && jspb.Message.setField(msg, 36, obj.source);
  obj.v2xInfo && jspb.Message.setWrapperField(
      msg, 37, proto.apollo.perception.V2XInformation.fromObject(obj.v2xInfo));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.Object}
 */
proto.apollo.dreamview.Object.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.Object;
  return proto.apollo.dreamview.Object.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.Object} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.Object}
 */
proto.apollo.dreamview.Object.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.apollo.dreamview.PolygonPoint;
      reader.readMessage(value,proto.apollo.dreamview.PolygonPoint.deserializeBinaryFromReader);
      msg.addPolygonPoint(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeading(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPositionX(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPositionY(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLength(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidth(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeed(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedAcceleration(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedJerk(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpin(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpinAcceleration(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpinJerk(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedHeading(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setKappa(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDkappa(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.addSignalSet(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentSignal(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestampSec(value);
      break;
    case 22:
      var value = new proto.apollo.dreamview.Decision;
      reader.readMessage(value,proto.apollo.dreamview.Decision.deserializeBinaryFromReader);
      msg.addDecision(value);
      break;
    case 32:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setYieldedObstacle(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThrottlePercentage(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBrakePercentage(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteeringPercentage(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteeringAngle(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteeringRatio(value);
      break;
    case 38:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBatteryPercentage(value);
      break;
    case 39:
      var value = /** @type {!proto.apollo.canbus.Chassis.GearPosition} */ (reader.readEnum());
      msg.setGearLocation(value);
      break;
    case 28:
      var value = /** @type {!proto.apollo.dreamview.Object.DisengageType} */ (reader.readEnum());
      msg.setDisengageType(value);
      break;
    case 29:
      var value = /** @type {!proto.apollo.dreamview.Object.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 34:
      var value = /** @type {!proto.apollo.perception.PerceptionObstacle.SubType} */ (reader.readEnum());
      msg.setSubType(value);
      break;
    case 30:
      var value = new proto.apollo.dreamview.Prediction;
      reader.readMessage(value,proto.apollo.dreamview.Prediction.deserializeBinaryFromReader);
      msg.addPrediction(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setConfidence(value);
      break;
    case 33:
      var value = new proto.apollo.prediction.ObstaclePriority;
      reader.readMessage(value,proto.apollo.prediction.ObstaclePriority.deserializeBinaryFromReader);
      msg.setObstaclePriority(value);
      break;
    case 40:
      var value = new proto.apollo.prediction.ObstacleInteractiveTag;
      reader.readMessage(value,proto.apollo.prediction.ObstacleInteractiveTag.deserializeBinaryFromReader);
      msg.setInteractiveTag(value);
      break;
    case 36:
      var value = /** @type {!proto.apollo.perception.PerceptionObstacle.Source} */ (reader.readEnum());
      msg.setSource(value);
      break;
    case 37:
      var value = new proto.apollo.perception.V2XInformation;
      reader.readMessage(value,proto.apollo.perception.V2XInformation.deserializeBinaryFromReader);
      msg.setV2xInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.Object.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.Object.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.Object} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Object.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPolygonPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.dreamview.PolygonPoint.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 35));
  if (f != null) {
    writer.writeDouble(
      35,
      f
    );
  }
  f = message.getSignalSetList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      19,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeString(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = message.getDecisionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      22,
      f,
      proto.apollo.dreamview.Decision.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 32));
  if (f != null) {
    writer.writeBool(
      32,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeDouble(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeDouble(
      24,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeDouble(
      25,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeDouble(
      26,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeDouble(
      27,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 38));
  if (f != null) {
    writer.writeInt32(
      38,
      f
    );
  }
  f = /** @type {!proto.apollo.canbus.Chassis.GearPosition} */ (jspb.Message.getField(message, 39));
  if (f != null) {
    writer.writeEnum(
      39,
      f
    );
  }
  f = /** @type {!proto.apollo.dreamview.Object.DisengageType} */ (jspb.Message.getField(message, 28));
  if (f != null) {
    writer.writeEnum(
      28,
      f
    );
  }
  f = /** @type {!proto.apollo.dreamview.Object.Type} */ (jspb.Message.getField(message, 29));
  if (f != null) {
    writer.writeEnum(
      29,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.PerceptionObstacle.SubType} */ (jspb.Message.getField(message, 34));
  if (f != null) {
    writer.writeEnum(
      34,
      f
    );
  }
  f = message.getPredictionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      30,
      f,
      proto.apollo.dreamview.Prediction.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeDouble(
      31,
      f
    );
  }
  f = message.getObstaclePriority();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      proto.apollo.prediction.ObstaclePriority.serializeBinaryToWriter
    );
  }
  f = message.getInteractiveTag();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.apollo.prediction.ObstacleInteractiveTag.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.perception.PerceptionObstacle.Source} */ (jspb.Message.getField(message, 36));
  if (f != null) {
    writer.writeEnum(
      36,
      f
    );
  }
  f = message.getV2xInfo();
  if (f != null) {
    writer.writeMessage(
      37,
      f,
      proto.apollo.perception.V2XInformation.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.dreamview.Object.DisengageType = {
  DISENGAGE_NONE: 0,
  DISENGAGE_UNKNOWN: 1,
  DISENGAGE_MANUAL: 2,
  DISENGAGE_EMERGENCY: 3,
  DISENGAGE_AUTO_STEER_ONLY: 4,
  DISENGAGE_AUTO_SPEED_ONLY: 5,
  DISENGAGE_CHASSIS_ERROR: 6
};

/**
 * @enum {number}
 */
proto.apollo.dreamview.Object.Type = {
  UNKNOWN: 0,
  UNKNOWN_MOVABLE: 1,
  UNKNOWN_UNMOVABLE: 2,
  PEDESTRIAN: 3,
  BICYCLE: 4,
  VEHICLE: 5,
  VIRTUAL: 6,
  CIPV: 7
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.apollo.dreamview.Object.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PolygonPoint polygon_point = 2;
 * @return {!Array<!proto.apollo.dreamview.PolygonPoint>}
 */
proto.apollo.dreamview.Object.prototype.getPolygonPointList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.PolygonPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.PolygonPoint, 2));
};


/**
 * @param {!Array<!proto.apollo.dreamview.PolygonPoint>} value
 * @return {!proto.apollo.dreamview.Object} returns this
*/
proto.apollo.dreamview.Object.prototype.setPolygonPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.dreamview.PolygonPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.PolygonPoint}
 */
proto.apollo.dreamview.Object.prototype.addPolygonPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.dreamview.PolygonPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearPolygonPointList = function() {
  return this.setPolygonPointList([]);
};


/**
 * optional double heading = 3;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setHeading = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearHeading = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasHeading = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double latitude = 4;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setLatitude = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearLatitude = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double longitude = 5;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setLongitude = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearLongitude = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double position_x = 6;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getPositionX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setPositionX = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearPositionX = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasPositionX = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double position_y = 7;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getPositionY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setPositionY = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearPositionY = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasPositionY = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double length = 8;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 2.8));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setLength = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearLength = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasLength = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double width = 9;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 1.4));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double height = 10;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 1.8));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double speed = 11;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSpeed = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSpeed = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double speed_acceleration = 12;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSpeedAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSpeedAcceleration = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSpeedAcceleration = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSpeedAcceleration = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double speed_jerk = 13;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSpeedJerk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSpeedJerk = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSpeedJerk = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSpeedJerk = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double spin = 14;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSpin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSpin = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSpin = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSpin = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional double spin_acceleration = 15;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSpinAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSpinAcceleration = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSpinAcceleration = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSpinAcceleration = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional double spin_jerk = 16;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSpinJerk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSpinJerk = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSpinJerk = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSpinJerk = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional double speed_heading = 17;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSpeedHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSpeedHeading = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSpeedHeading = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSpeedHeading = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional double kappa = 18;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getKappa = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setKappa = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearKappa = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasKappa = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional double dkappa = 35;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getDkappa = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 35, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setDkappa = function(value) {
  return jspb.Message.setField(this, 35, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearDkappa = function() {
  return jspb.Message.setField(this, 35, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasDkappa = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * repeated string signal_set = 19;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.Object.prototype.getSignalSetList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 19));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSignalSetList = function(value) {
  return jspb.Message.setField(this, 19, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.addSignalSet = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 19, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSignalSetList = function() {
  return this.setSignalSetList([]);
};


/**
 * optional string current_signal = 20;
 * @return {string}
 */
proto.apollo.dreamview.Object.prototype.getCurrentSignal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setCurrentSignal = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearCurrentSignal = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasCurrentSignal = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional double timestamp_sec = 21;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getTimestampSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setTimestampSec = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearTimestampSec = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasTimestampSec = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * repeated Decision decision = 22;
 * @return {!Array<!proto.apollo.dreamview.Decision>}
 */
proto.apollo.dreamview.Object.prototype.getDecisionList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.Decision>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.Decision, 22));
};


/**
 * @param {!Array<!proto.apollo.dreamview.Decision>} value
 * @return {!proto.apollo.dreamview.Object} returns this
*/
proto.apollo.dreamview.Object.prototype.setDecisionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 22, value);
};


/**
 * @param {!proto.apollo.dreamview.Decision=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.Decision}
 */
proto.apollo.dreamview.Object.prototype.addDecision = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 22, opt_value, proto.apollo.dreamview.Decision, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearDecisionList = function() {
  return this.setDecisionList([]);
};


/**
 * optional bool yielded_obstacle = 32;
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.getYieldedObstacle = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 32, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setYieldedObstacle = function(value) {
  return jspb.Message.setField(this, 32, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearYieldedObstacle = function() {
  return jspb.Message.setField(this, 32, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasYieldedObstacle = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional double throttle_percentage = 23;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getThrottlePercentage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 23, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setThrottlePercentage = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearThrottlePercentage = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasThrottlePercentage = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional double brake_percentage = 24;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getBrakePercentage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setBrakePercentage = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearBrakePercentage = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasBrakePercentage = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional double steering_percentage = 25;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSteeringPercentage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 25, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSteeringPercentage = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSteeringPercentage = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSteeringPercentage = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional double steering_angle = 26;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSteeringAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 26, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSteeringAngle = function(value) {
  return jspb.Message.setField(this, 26, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSteeringAngle = function() {
  return jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSteeringAngle = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional double steering_ratio = 27;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSteeringRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 27, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSteeringRatio = function(value) {
  return jspb.Message.setField(this, 27, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSteeringRatio = function() {
  return jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSteeringRatio = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional int32 battery_percentage = 38;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getBatteryPercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 38, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setBatteryPercentage = function(value) {
  return jspb.Message.setField(this, 38, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearBatteryPercentage = function() {
  return jspb.Message.setField(this, 38, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasBatteryPercentage = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * optional apollo.canbus.Chassis.GearPosition gear_location = 39;
 * @return {!proto.apollo.canbus.Chassis.GearPosition}
 */
proto.apollo.dreamview.Object.prototype.getGearLocation = function() {
  return /** @type {!proto.apollo.canbus.Chassis.GearPosition} */ (jspb.Message.getFieldWithDefault(this, 39, 0));
};


/**
 * @param {!proto.apollo.canbus.Chassis.GearPosition} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setGearLocation = function(value) {
  return jspb.Message.setField(this, 39, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearGearLocation = function() {
  return jspb.Message.setField(this, 39, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasGearLocation = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional DisengageType disengage_type = 28;
 * @return {!proto.apollo.dreamview.Object.DisengageType}
 */
proto.apollo.dreamview.Object.prototype.getDisengageType = function() {
  return /** @type {!proto.apollo.dreamview.Object.DisengageType} */ (jspb.Message.getFieldWithDefault(this, 28, 0));
};


/**
 * @param {!proto.apollo.dreamview.Object.DisengageType} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setDisengageType = function(value) {
  return jspb.Message.setField(this, 28, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearDisengageType = function() {
  return jspb.Message.setField(this, 28, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasDisengageType = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional Type type = 29;
 * @return {!proto.apollo.dreamview.Object.Type}
 */
proto.apollo.dreamview.Object.prototype.getType = function() {
  return /** @type {!proto.apollo.dreamview.Object.Type} */ (jspb.Message.getFieldWithDefault(this, 29, 0));
};


/**
 * @param {!proto.apollo.dreamview.Object.Type} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setType = function(value) {
  return jspb.Message.setField(this, 29, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearType = function() {
  return jspb.Message.setField(this, 29, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasType = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional apollo.perception.PerceptionObstacle.SubType sub_type = 34;
 * @return {!proto.apollo.perception.PerceptionObstacle.SubType}
 */
proto.apollo.dreamview.Object.prototype.getSubType = function() {
  return /** @type {!proto.apollo.perception.PerceptionObstacle.SubType} */ (jspb.Message.getFieldWithDefault(this, 34, 0));
};


/**
 * @param {!proto.apollo.perception.PerceptionObstacle.SubType} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSubType = function(value) {
  return jspb.Message.setField(this, 34, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSubType = function() {
  return jspb.Message.setField(this, 34, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSubType = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * repeated Prediction prediction = 30;
 * @return {!Array<!proto.apollo.dreamview.Prediction>}
 */
proto.apollo.dreamview.Object.prototype.getPredictionList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.Prediction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.Prediction, 30));
};


/**
 * @param {!Array<!proto.apollo.dreamview.Prediction>} value
 * @return {!proto.apollo.dreamview.Object} returns this
*/
proto.apollo.dreamview.Object.prototype.setPredictionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 30, value);
};


/**
 * @param {!proto.apollo.dreamview.Prediction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.Prediction}
 */
proto.apollo.dreamview.Object.prototype.addPrediction = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 30, opt_value, proto.apollo.dreamview.Prediction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearPredictionList = function() {
  return this.setPredictionList([]);
};


/**
 * optional double confidence = 31;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 31, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setConfidence = function(value) {
  return jspb.Message.setField(this, 31, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearConfidence = function() {
  return jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasConfidence = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional apollo.prediction.ObstaclePriority obstacle_priority = 33;
 * @return {?proto.apollo.prediction.ObstaclePriority}
 */
proto.apollo.dreamview.Object.prototype.getObstaclePriority = function() {
  return /** @type{?proto.apollo.prediction.ObstaclePriority} */ (
    jspb.Message.getWrapperField(this, proto.apollo.prediction.ObstaclePriority, 33));
};


/**
 * @param {?proto.apollo.prediction.ObstaclePriority|undefined} value
 * @return {!proto.apollo.dreamview.Object} returns this
*/
proto.apollo.dreamview.Object.prototype.setObstaclePriority = function(value) {
  return jspb.Message.setWrapperField(this, 33, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearObstaclePriority = function() {
  return this.setObstaclePriority(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasObstaclePriority = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional apollo.prediction.ObstacleInteractiveTag interactive_tag = 40;
 * @return {?proto.apollo.prediction.ObstacleInteractiveTag}
 */
proto.apollo.dreamview.Object.prototype.getInteractiveTag = function() {
  return /** @type{?proto.apollo.prediction.ObstacleInteractiveTag} */ (
    jspb.Message.getWrapperField(this, proto.apollo.prediction.ObstacleInteractiveTag, 40));
};


/**
 * @param {?proto.apollo.prediction.ObstacleInteractiveTag|undefined} value
 * @return {!proto.apollo.dreamview.Object} returns this
*/
proto.apollo.dreamview.Object.prototype.setInteractiveTag = function(value) {
  return jspb.Message.setWrapperField(this, 40, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearInteractiveTag = function() {
  return this.setInteractiveTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasInteractiveTag = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional apollo.perception.PerceptionObstacle.Source source = 36;
 * @return {!proto.apollo.perception.PerceptionObstacle.Source}
 */
proto.apollo.dreamview.Object.prototype.getSource = function() {
  return /** @type {!proto.apollo.perception.PerceptionObstacle.Source} */ (jspb.Message.getFieldWithDefault(this, 36, 0));
};


/**
 * @param {!proto.apollo.perception.PerceptionObstacle.Source} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSource = function(value) {
  return jspb.Message.setField(this, 36, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSource = function() {
  return jspb.Message.setField(this, 36, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSource = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional apollo.perception.V2XInformation v2x_info = 37;
 * @return {?proto.apollo.perception.V2XInformation}
 */
proto.apollo.dreamview.Object.prototype.getV2xInfo = function() {
  return /** @type{?proto.apollo.perception.V2XInformation} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.V2XInformation, 37));
};


/**
 * @param {?proto.apollo.perception.V2XInformation|undefined} value
 * @return {!proto.apollo.dreamview.Object} returns this
*/
proto.apollo.dreamview.Object.prototype.setV2xInfo = function(value) {
  return jspb.Message.setWrapperField(this, 37, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearV2xInfo = function() {
  return this.setV2xInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasV2xInfo = function() {
  return jspb.Message.getField(this, 37) != null;
};


