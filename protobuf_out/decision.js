// source: modules/dreamview/proto/simulation_world.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.apollo.dreamview.Decision');
goog.provide('proto.apollo.dreamview.Decision.StopReasonCode');
goog.provide('proto.apollo.dreamview.Decision.Type');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.apollo.dreamview.PolygonPoint');

goog.forwardDeclare('proto.apollo.routing.ChangeLaneType');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.Decision = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.Decision.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.Decision, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.Decision.displayName = 'proto.apollo.dreamview.Decision';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.Decision.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.Decision.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.Decision.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.Decision} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Decision.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    polygonPointList: jspb.Message.toObjectList(msg.getPolygonPointList(),
    proto.apollo.dreamview.PolygonPoint.toObject, includeInstance),
    heading: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    latitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    longitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    positionX: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    positionY: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    length: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 2.8),
    width: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 1.4),
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 1.8),
    stopreason: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    changeLaneType: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Decision as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.Decision.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.polygonPointList;

  /** @type {?|undefined} */
  this.heading;

  /** @type {?|undefined} */
  this.latitude;

  /** @type {?|undefined} */
  this.longitude;

  /** @type {?|undefined} */
  this.positionX;

  /** @type {?|undefined} */
  this.positionY;

  /** @type {?|undefined} */
  this.length;

  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.height;

  /** @type {?|undefined} */
  this.stopreason;

  /** @type {?|undefined} */
  this.changeLaneType;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.Decision.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.Decision}
 */
proto.apollo.dreamview.Decision.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.Decision();
  obj.type != null && jspb.Message.setField(msg, 1, obj.type);
  obj.polygonPointList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.polygonPointList.map(
          proto.apollo.dreamview.PolygonPoint.fromObject));
  obj.heading != null && jspb.Message.setField(msg, 3, obj.heading);
  obj.latitude != null && jspb.Message.setField(msg, 4, obj.latitude);
  obj.longitude != null && jspb.Message.setField(msg, 5, obj.longitude);
  obj.positionX != null && jspb.Message.setField(msg, 6, obj.positionX);
  obj.positionY != null && jspb.Message.setField(msg, 7, obj.positionY);
  obj.length != null && jspb.Message.setField(msg, 8, obj.length);
  obj.width != null && jspb.Message.setField(msg, 9, obj.width);
  obj.height != null && jspb.Message.setField(msg, 10, obj.height);
  obj.stopreason != null && jspb.Message.setField(msg, 11, obj.stopreason);
  obj.changeLaneType != null && jspb.Message.setField(msg, 12, obj.changeLaneType);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.Decision}
 */
proto.apollo.dreamview.Decision.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.Decision;
  return proto.apollo.dreamview.Decision.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.Decision} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.Decision}
 */
proto.apollo.dreamview.Decision.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.dreamview.Decision.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.apollo.dreamview.PolygonPoint;
      reader.readMessage(value,proto.apollo.dreamview.PolygonPoint.deserializeBinaryFromReader);
      msg.addPolygonPoint(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeading(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPositionX(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPositionY(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLength(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidth(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 11:
      var value = /** @type {!proto.apollo.dreamview.Decision.StopReasonCode} */ (reader.readEnum());
      msg.setStopreason(value);
      break;
    case 12:
      var value = /** @type {!proto.apollo.routing.ChangeLaneType} */ (reader.readEnum());
      msg.setChangeLaneType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.Decision.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.Decision.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.Decision} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Decision.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.dreamview.Decision.Type} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPolygonPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.dreamview.PolygonPoint.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {!proto.apollo.dreamview.Decision.StopReasonCode} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = /** @type {!proto.apollo.routing.ChangeLaneType} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeEnum(
      12,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.dreamview.Decision.Type = {
  IGNORE: 0,
  STOP: 1,
  NUDGE: 2,
  YIELD: 3,
  OVERTAKE: 4,
  FOLLOW: 5,
  SIDEPASS: 6
};

/**
 * @enum {number}
 */
proto.apollo.dreamview.Decision.StopReasonCode = {
  STOP_REASON_HEAD_VEHICLE: 1,
  STOP_REASON_DESTINATION: 2,
  STOP_REASON_PEDESTRIAN: 3,
  STOP_REASON_OBSTACLE: 4,
  STOP_REASON_SIGNAL: 100,
  STOP_REASON_STOP_SIGN: 101,
  STOP_REASON_YIELD_SIGN: 102,
  STOP_REASON_CLEAR_ZONE: 103,
  STOP_REASON_CROSSWALK: 104,
  STOP_REASON_EMERGENCY: 105,
  STOP_REASON_NOT_READY: 106,
  STOP_REASON_PULL_OVER: 107
};

/**
 * optional Type type = 1;
 * @return {!proto.apollo.dreamview.Decision.Type}
 */
proto.apollo.dreamview.Decision.prototype.getType = function() {
  return /** @type {!proto.apollo.dreamview.Decision.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.dreamview.Decision.Type} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PolygonPoint polygon_point = 2;
 * @return {!Array<!proto.apollo.dreamview.PolygonPoint>}
 */
proto.apollo.dreamview.Decision.prototype.getPolygonPointList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.PolygonPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.PolygonPoint, 2));
};


/**
 * @param {!Array<!proto.apollo.dreamview.PolygonPoint>} value
 * @return {!proto.apollo.dreamview.Decision} returns this
*/
proto.apollo.dreamview.Decision.prototype.setPolygonPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.dreamview.PolygonPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.PolygonPoint}
 */
proto.apollo.dreamview.Decision.prototype.addPolygonPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.dreamview.PolygonPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearPolygonPointList = function() {
  return this.setPolygonPointList([]);
};


/**
 * optional double heading = 3;
 * @return {number}
 */
proto.apollo.dreamview.Decision.prototype.getHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setHeading = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearHeading = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasHeading = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double latitude = 4;
 * @return {number}
 */
proto.apollo.dreamview.Decision.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setLatitude = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearLatitude = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double longitude = 5;
 * @return {number}
 */
proto.apollo.dreamview.Decision.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setLongitude = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearLongitude = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double position_x = 6;
 * @return {number}
 */
proto.apollo.dreamview.Decision.prototype.getPositionX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setPositionX = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearPositionX = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasPositionX = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double position_y = 7;
 * @return {number}
 */
proto.apollo.dreamview.Decision.prototype.getPositionY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setPositionY = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearPositionY = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasPositionY = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double length = 8;
 * @return {number}
 */
proto.apollo.dreamview.Decision.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 2.8));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setLength = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearLength = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasLength = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double width = 9;
 * @return {number}
 */
proto.apollo.dreamview.Decision.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 1.4));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double height = 10;
 * @return {number}
 */
proto.apollo.dreamview.Decision.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 1.8));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional StopReasonCode stopReason = 11;
 * @return {!proto.apollo.dreamview.Decision.StopReasonCode}
 */
proto.apollo.dreamview.Decision.prototype.getStopreason = function() {
  return /** @type {!proto.apollo.dreamview.Decision.StopReasonCode} */ (jspb.Message.getFieldWithDefault(this, 11, 1));
};


/**
 * @param {!proto.apollo.dreamview.Decision.StopReasonCode} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setStopreason = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearStopreason = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasStopreason = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional apollo.routing.ChangeLaneType change_lane_type = 12;
 * @return {!proto.apollo.routing.ChangeLaneType}
 */
proto.apollo.dreamview.Decision.prototype.getChangeLaneType = function() {
  return /** @type {!proto.apollo.routing.ChangeLaneType} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.apollo.routing.ChangeLaneType} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setChangeLaneType = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearChangeLaneType = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasChangeLaneType = function() {
  return jspb.Message.getField(this, 12) != null;
};


